<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>与卿画眉共浮生</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="www.zhengjie.me/"/>
  <updated>2018-09-10T01:35:04.627Z</updated>
  <id>www.zhengjie.me/</id>
  
  <author>
    <name>郑杰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL:使用SQL语句删除所有索引</title>
    <link href="www.zhengjie.me/blog/100.html"/>
    <id>www.zhengjie.me/blog/100.html</id>
    <published>2018-09-05T06:14:41.000Z</published>
    <updated>2018-09-10T01:35:04.627Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>要清空所有的索引，首先得先清空所有的外键关联，清空所有外键关联可以参考：<br><a href="https://www.zhengjie.me/blog/99.html">https://www.zhengjie.me/blog/99.html</a></p><h3 id="删除所有索引"><a href="#删除所有索引" class="headerlink" title="删除所有索引"></a>删除所有索引</h3><p>可利用<em>ALTER TABLE</em>或<em>DROP INDEX</em>语句来删除索引。这里使用<em>ALTER TABLE</em>，首先查询所有索引，然后拼接成删除语句，复制执行即可<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#拼接</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONCAT</span>(<span class="string">'ALTER TABLE '</span>,i.TABLE_NAME,<span class="string">' DROP INDEX '</span>,i.INDEX_NAME,<span class="string">' ;'</span>) </span><br><span class="line"><span class="keyword">FROM</span> INFORMATION_SCHEMA.STATISTICS i</span><br><span class="line">#过滤主键索引</span><br><span class="line"><span class="keyword">WHERE</span> TABLE_SCHEMA = <span class="string">'库名'</span> <span class="keyword">AND</span> i.INDEX_NAME &lt;&gt; <span class="string">'PRIMARY'</span>;</span><br></pre></td></tr></table></figure></p><p><strong>查询结果如下：</strong><br><img src="https://i.imgur.com/G0lP6YP.png" alt=""></p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h4 id="查询索引"><a href="#查询索引" class="headerlink" title="查询索引"></a>查询索引</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">     *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">     INFORMATION_SCHEMA.STATISTICS</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">     TABLE_SCHEMA = <span class="string">'库名'</span>;</span><br><span class="line">#或者使用查看表的索引</span><br><span class="line">(1)<span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> tblname;</span><br><span class="line">(2)<span class="keyword">show</span> <span class="keyword">keys</span> <span class="keyword">from</span> tblname;</span><br></pre></td></tr></table></figure><h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4><p>执行CREATE TABLE语句可以创建索引，也可以单独用CREATE INDEX或ALTER TABLE来为表增加索引。</p><h5 id="ALTER-TABLE"><a href="#ALTER-TABLE" class="headerlink" title="ALTER TABLE"></a>ALTER TABLE</h5><p>ALTER TABLE用来创建普通索引、UNIQUE索引或PRIMARY KEY索引。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(1.)<span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ADD</span> <span class="keyword">INDEX</span> index_name (column_list)</span><br><span class="line">(<span class="number">2.</span>)<span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> (column_list)</span><br><span class="line">(<span class="number">3.</span>)<span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ADD</span> PRIMARY <span class="keyword">KEY</span> (column_list)</span><br></pre></td></tr></table></figure></p><p>其中<em>table_name</em>是要增加索引的表名，<em>column_list</em>指出对哪些列进行索引，多列时各列之间用逗号分隔。索引名<em>index_name</em>可选，缺省时，MySQL将根据第一个索引列赋一个名称。另外，ALTER TABLE允许在单个语句中更改多个表，因此可以在同时创建多个索引。</p><h5 id="CREATE-INDEX"><a href="#CREATE-INDEX" class="headerlink" title="CREATE INDEX"></a>CREATE INDEX</h5><p>CREATE INDEX可对表增加普通索引或UNIQUE索引。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(1)<span class="keyword">CREATE</span> <span class="keyword">INDEX</span> index_name <span class="keyword">ON</span> table_name (column_list)</span><br><span class="line">(<span class="number">2</span>)<span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> index_name <span class="keyword">ON</span> table_name (column_list)</span><br></pre></td></tr></table></figure></p><p>table_name、index_name和column_list具有与ALTER TABLE语句中相同的含义，索引名不可选。另外，不能用CREATE INDEX语句创建PRIMARY KEY索引。</p><h4 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(1)<span class="keyword">DROP</span> <span class="keyword">INDEX</span> index_name <span class="keyword">ON</span> talbe_name</span><br><span class="line">(<span class="number">2</span>)<span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">DROP</span> <span class="keyword">INDEX</span> index_name</span><br><span class="line">(<span class="number">3</span>)<span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">DROP</span> PRIMARY <span class="keyword">KEY</span></span><br></pre></td></tr></table></figure><p>其中，前两条语句是等价的，删除掉<em>table_name</em>中的索引<em>index_name</em>。<br>第3条语句只在删除PRIMARY KEY索引时使用，因为一个表只可能有一个PRIMARY KEY索引，因此不需要指定索引名。如果没有创建PRIMARY KEY索引，但表具有一个或多个UNIQUE索引，则MySQL将删除第一个UNIQUE索引。<br>如果从表中删除了某列，则索引会受到影响。对于多列组合的索引，如果删除其中的某列，则该列也会从索引中删除。如果删除组成索引的所有列，则整个索引将被删除。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;要清空所有的索引，首先得先清空所有的外键关联，清空所有外键关联可以参考：&lt;br&gt;&lt;a href=&quot;https://www.zhengjie.
      
    
    </summary>
    
      <category term="MySQL" scheme="www.zhengjie.me/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="www.zhengjie.me/tags/mysql/"/>
    
      <category term="mysql清空索引" scheme="www.zhengjie.me/tags/mysql%E6%B8%85%E7%A9%BA%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>MYSQL:使用SQL语句清空所有外键关联</title>
    <link href="www.zhengjie.me/blog/99.html"/>
    <id>www.zhengjie.me/blog/99.html</id>
    <published>2018-09-01T12:21:15.000Z</published>
    <updated>2018-09-03T01:32:40.883Z</updated>
    
    <content type="html"><![CDATA[<h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>执行下面SQL语句查询数据库中所有外键名称然后拼接生成删除语句，再执行</p><p><strong>SQL语句入下：</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#拼接所有外键</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONCAT</span>(<span class="string">'ALTER TABLE '</span>,TABLE_SCHEMA,<span class="string">'.'</span>,TABLE_NAME,<span class="string">' DROP FOREIGN KEY '</span>,CONSTRAINT_NAME,<span class="string">' ;'</span>) </span><br><span class="line"><span class="keyword">FROM</span> information_schema.TABLE_CONSTRAINTS c </span><br><span class="line"><span class="keyword">WHERE</span> c.TABLE_SCHEMA=<span class="string">'库名'</span> <span class="keyword">AND</span> c.CONSTRAINT_TYPE=<span class="string">'FOREIGN KEY'</span>;</span><br></pre></td></tr></table></figure></p><p>执行结果如下，复制拼接好的sql语句，执行即可</p><p><img src="https://i.imgur.com/3o1uMyp.jpg" alt=""></p><h4 id="检查结果"><a href="#检查结果" class="headerlink" title="检查结果"></a>检查结果</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CONSTRAINT_NAME</span><br><span class="line"><span class="keyword">FROM</span> information_schema.TABLE_CONSTRAINTS c </span><br><span class="line"><span class="keyword">WHERE</span> c.TABLE_SCHEMA=<span class="string">'aurora'</span> <span class="keyword">AND</span> c.CONSTRAINT_TYPE=<span class="string">'FOREIGN KEY'</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;解决办法&quot;&gt;&lt;a href=&quot;#解决办法&quot; class=&quot;headerlink&quot; title=&quot;解决办法&quot;&gt;&lt;/a&gt;解决办法&lt;/h4&gt;&lt;p&gt;执行下面SQL语句查询数据库中所有外键名称然后拼接生成删除语句，再执行&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SQL语句入下：&lt;/s
      
    
    </summary>
    
      <category term="MySQL" scheme="www.zhengjie.me/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="www.zhengjie.me/tags/mysql/"/>
    
      <category term="mysql清空外键约束" scheme="www.zhengjie.me/tags/mysql%E6%B8%85%E7%A9%BA%E5%A4%96%E9%94%AE%E7%BA%A6%E6%9D%9F/"/>
    
  </entry>
  
  <entry>
    <title>【Java8新特性】新的日期和时间API</title>
    <link href="www.zhengjie.me/blog/2.html"/>
    <id>www.zhengjie.me/blog/2.html</id>
    <published>2018-08-30T09:30:44.000Z</published>
    <updated>2018-08-31T00:42:34.494Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>Java 8之前的库对日期和时间的支持并不理想，为了解决这个问题，Java 8引入了一套全新的时间日期API，位于java.time路径下。</p><h4 id="LocalDate"><a href="#LocalDate" class="headerlink" title="LocalDate"></a>LocalDate</h4><p>LocalDate类型包含了年月日信息，下面举些LocalDate的使用示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">LocalDate date = LocalDate.of(<span class="number">2018</span>, <span class="number">8</span>, <span class="number">30</span>); <span class="comment">// 2018-08-30</span></span><br><span class="line"><span class="keyword">int</span> year = date.getYear(); <span class="comment">// 2018</span></span><br><span class="line"><span class="keyword">int</span> month = date.getMonth().getValue(); <span class="comment">// 8</span></span><br><span class="line"><span class="keyword">int</span> day = date.getDayOfMonth(); <span class="comment">// 30</span></span><br><span class="line"><span class="comment">// 查看该月有多少天</span></span><br><span class="line"><span class="keyword">int</span> days = date.lengthOfMonth(); <span class="comment">// 31</span></span><br><span class="line"><span class="comment">// 是否是闰年</span></span><br><span class="line"><span class="keyword">boolean</span> isLeap = date.isLeapYear(); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><p>可以使用LocalDate.now()获取当天的日期信息：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查看当天 年月日</span></span><br><span class="line">LocalDate today = LocalDate.now(); <span class="comment">// 2018-08-30</span></span><br></pre></td></tr></table></figure></p><p>除了调用LocalDate的getYear方法外，我们也可以使用ChronoField枚举类型来实现相同的功能：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> year1 = date.get(ChronoField.YEAR); <span class="comment">// 2018</span></span><br><span class="line"><span class="keyword">int</span> month1 = date.get(ChronoField.MONTH_OF_YEAR); <span class="comment">// 8</span></span><br><span class="line"><span class="keyword">int</span> day1 = date.get(ChronoField.DAY_OF_MONTH); <span class="comment">// 30</span></span><br><span class="line"><span class="comment">// 当前日期属于该月第几周</span></span><br><span class="line"><span class="keyword">int</span> weekOfMonth = date.get(ChronoField.ALIGNED_WEEK_OF_MONTH); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure></p><p>ChronoField枚举类型包含了诸多的属性可供选择：</p><p><img src="https://i.loli.net/2018/08/30/5b87d0c167666.png" alt=""></p><p>我们也可以修改LocalDate对象：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">LocalDate date3 = LocalDate.of(<span class="number">2018</span>, <span class="number">8</span>, <span class="number">30</span>); <span class="comment">// 2018-08-30</span></span><br><span class="line">LocalDate date4 = date3.withDayOfMonth(<span class="number">30</span>); <span class="comment">// 2018-08-30</span></span><br><span class="line">LocalDate date5 = date3.with(ChronoField.DAY_OF_MONTH, <span class="number">30</span>); <span class="comment">// 2018-08-30</span></span><br><span class="line">LocalDate date6 = date3.withYear(<span class="number">2019</span>); <span class="comment">// 2019-08-30</span></span><br><span class="line">LocalDate date7 = date3.plusDays(<span class="number">5</span>); <span class="comment">// 2018-09-04</span></span><br><span class="line">LocalDate date8 = date3.plus(<span class="number">5</span>, ChronoUnit.DAYS); <span class="comment">// 2018-09-04</span></span><br><span class="line">LocalDate date9 = date3.minusYears(<span class="number">10</span>); <span class="comment">// 2008-08-30</span></span><br></pre></td></tr></table></figure></p><p>TemporalAdjusters类提供了许多静态方法来修改LocalDate对象。当我们需要获取下一个周天，下一个工作日，本月的最后一天等信息时，TemporalAdjusters类便可派上用场：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.time.temporal.TemporalAdjusters.*;</span><br><span class="line">LocalDate date10 = date3.with(nextOrSame(DayOfWeek.MONDAY)); <span class="comment">// 2018-09-03</span></span><br><span class="line">LocalDate date11 = date3.with(lastDayOfMonth()); <span class="comment">// 2018-09-31</span></span><br><span class="line">LocalDate date12 = date3.with(previous(DayOfWeek.SATURDAY)); <span class="comment">// 2018-08-25</span></span><br></pre></td></tr></table></figure></p><p>可参考9月的日历来理解上面的结果：</p><p><img src="https://i.loli.net/2018/08/30/5b87d0db8d441.jpg" alt=""></p><p>我们还可以对LocalDate进行格式化操作：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String str1 = date.format(DateTimeFormatter.BASIC_ISO_DATE); <span class="comment">// 20180930</span></span><br><span class="line">String str2 = date.format(DateTimeFormatter.ISO_LOCAL_DATE); <span class="comment">// 2018-09-30</span></span><br><span class="line">DateTimeFormatter dtf = DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">String str5 = date.format(dtf); <span class="comment">// 2018-09-30</span></span><br><span class="line">LocalDate date13 = LocalDate.parse(str5, dtf); <span class="comment">// 2018-09-30</span></span><br></pre></td></tr></table></figure></p><blockquote><p>LocalDate和下面要介绍的LocalTime<br>LocalDateTime之间共享了许多类似的方法，上面介绍的LocalDate修改、格式化等方法通用适用于LocalTime和LocalDateTime。</p></blockquote><h4 id="LocalTime"><a href="#LocalTime" class="headerlink" title="LocalTime"></a>LocalTime</h4><p>LocalTime和LocalDate类似，区别在于LocalTime包含的是时分秒（毫秒）信息。举些LocalTime的例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LocalTime time = LocalTime.of(<span class="number">20</span>, <span class="number">13</span>, <span class="number">54</span>); <span class="comment">// 17:18:54</span></span><br><span class="line"><span class="keyword">int</span> hour = time.getHour(); <span class="comment">// 17</span></span><br><span class="line"><span class="keyword">int</span> minute = time.getMinute(); <span class="comment">// 18</span></span><br><span class="line"><span class="keyword">int</span> second = time.getSecond(); <span class="comment">// 54</span></span><br></pre></td></tr></table></figure></p><p>LocalDate和LocalTime都可以通过字符串来创建：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LocalDate date = LocalDate.parse(<span class="string">"2018-09-30"</span>);</span><br><span class="line">LocalTime time = LocalTime.parse(<span class="string">"17:18:54"</span>);</span><br></pre></td></tr></table></figure></p><h4 id="LocalDateTime"><a href="#LocalDateTime" class="headerlink" title="LocalDateTime"></a>LocalDateTime</h4><p>LocalDateTime是LocalDate和LocalTime的组合形式，包含了年月日时分秒信息。举些LocalDateTime的使用示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime ldt1 = LocalDateTime.of(<span class="number">2018</span>, <span class="number">9</span>, <span class="number">30</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">54</span>); <span class="comment">// 2018-09-30T17:18:54</span></span><br><span class="line">LocalDateTime ldt2 = LocalDateTime.of(date, time); <span class="comment">// 2018-09-30T17:18:54</span></span><br></pre></td></tr></table></figure></p><p>LocalDateTime可以转换为LocalDate和LocalTime，转换后包含的信息减少了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LocalDate date1 = ldt1.toLocalDate(); <span class="comment">// 2018-09-30</span></span><br><span class="line">LocalTime time1 = ldt1.toLocalTime(); <span class="comment">// 17:18:54</span></span><br></pre></td></tr></table></figure></p><p>同样的，LocalDate和LocalTime也可以转换为LocalDateTime，只需要补上日期或者时间：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime ldt3 = date.atTime(time); <span class="comment">// 2019-09-30T17:18:54</span></span><br><span class="line">LocalDateTime ldt4 = date.atTime(<span class="number">17</span>, <span class="number">18</span>, <span class="number">54</span>); <span class="comment">// 2019-09-30T17:18:54</span></span><br><span class="line">LocalDateTime ldt5 = time.atDate(date); <span class="comment">// 2019-09-30T17:18:54</span></span><br></pre></td></tr></table></figure></p><h4 id="Duration"><a href="#Duration" class="headerlink" title="Duration"></a>Duration</h4><p>Duration用于计算两个LocalTime或者LocalDateTime的时间差，例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LocalTime time2 = LocalTime.of(<span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>);</span><br><span class="line">Duration duration = Duration.between(time1, time2);</span><br><span class="line"><span class="keyword">long</span> seconds = duration.getSeconds(); <span class="comment">// 13565</span></span><br></pre></td></tr></table></figure></p><p>time1和time2之间相差了13565秒。</p><p>手动创建Duration对象：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Duration threeMinutes = Duration.ofMinutes(<span class="number">3</span>);</span><br><span class="line">threeMinutes = Duration.of(<span class="number">3</span>, ChronoUnit.MINUTES); <span class="comment">// 创建了一个3分钟的Duration，两种创建方式等价</span></span><br></pre></td></tr></table></figure></p><h4 id="Period"><a href="#Period" class="headerlink" title="Period"></a>Period</h4><p>Period用于计算两个LocalDate之间的时长。举些例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LocalDate date2 = LocalDate.of(<span class="number">2018</span>, <span class="number">10</span>, <span class="number">31</span>);</span><br><span class="line">Period period = Period.between(date1, date2);</span><br><span class="line"><span class="keyword">int</span> monthsBetween = period.getMonths(); <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">int</span> daysBetween = period.getDays(); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></p><p>2018-09-30和2018-10-30之间月份相差1，天数相差1。</p><p>同样的，我们也可以手动创建Period对象：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Period tenDays = Period.ofDays(<span class="number">10</span>);</span><br><span class="line">Period threeWeeks = Period.ofWeeks(<span class="number">3</span>);</span><br><span class="line">Period twoYearsSixMonthsOneDay = Period.of(<span class="number">2</span>, <span class="number">6</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure></p><h4 id="其他一些常用的方法"><a href="#其他一些常用的方法" class="headerlink" title="其他一些常用的方法"></a>其他一些常用的方法</h4><h5 id="比较两个时间的先后"><a href="#比较两个时间的先后" class="headerlink" title="比较两个时间的先后"></a>比较两个时间的先后</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LocalDate date15 = LocalDate.of(<span class="number">2018</span>,<span class="number">9</span>,<span class="number">31</span>);</span><br><span class="line">date.isEqual(date15); <span class="comment">// false</span></span><br><span class="line">date.isAfter(date15); <span class="comment">// false</span></span><br><span class="line">date.isBefore(date15); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h5 id="MonthDay类的使用"><a href="#MonthDay类的使用" class="headerlink" title="MonthDay类的使用"></a>MonthDay类的使用</h5><p>MonthDay只包含月日信息，可以用于存放类似于生日，结婚纪念日等信息。举个使用MonthDay的例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LocalDate birthday = LocalDate.of(<span class="number">1999</span>, <span class="number">9</span>, <span class="number">9</span>);</span><br><span class="line">MonthDay monthDay = MonthDay.of(birthday.getMonth(), birthday.getDayOfMonth());</span><br><span class="line">MonthDay currentMonthDay = MonthDay.from(LocalDate.now());</span><br><span class="line"><span class="keyword">if</span> (currentMonthDay.equals(monthDay)) &#123;</span><br><span class="line">    System.out.println(<span class="string">"happy birthday!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>假如用户的生日是1999年9月9号，那么可以通过这种方法来判断今天是否是用户的生日，如果是的话便发送生日祝福。同样的也有YearMonth类。</p><blockquote><p><strong>原文：</strong><a href="https://mrbird.cc/java8-new-time-date-api.html" target="_blank" rel="noopener">https://mrbird.cc/java8-new-time-date-api.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;Java 8之前的库对日期和时间的支持并不理想，为了解决这个问题，Java 8引入了一套全新的时间日期API，位于java.time路径下。
      
    
    </summary>
    
      <category term="随笔" scheme="www.zhengjie.me/categories/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="Java8新特性" scheme="www.zhengjie.me/categories/%E9%9A%8F%E7%AC%94/Java8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
    
      <category term="Java8新特性" scheme="www.zhengjie.me/tags/Java8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
      <category term="LocalDate" scheme="www.zhengjie.me/tags/LocalDate/"/>
    
      <category term="LocalTime" scheme="www.zhengjie.me/tags/LocalTime/"/>
    
      <category term="LocalDateTime" scheme="www.zhengjie.me/tags/LocalDateTime/"/>
    
  </entry>
  
  <entry>
    <title>git同步提交代码到github和码云上</title>
    <link href="www.zhengjie.me/blog/1.html"/>
    <id>www.zhengjie.me/blog/1.html</id>
    <published>2018-08-30T07:41:44.000Z</published>
    <updated>2018-08-31T00:42:49.690Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>github毕竟是国外的，有时候访问也不稳定，而且速度也比较慢，所有我在提交代码到github上的时候有时候会同步一份到码云，之前都是分为两步上传</p><ol><li>先提交到github </li><li>将最新的代码复制一份到码云的文件夹，提交到码云</li></ol><p>这种方式太笨了，如何在一个仓库里面同时提交到多个平台呢？</p><h4 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h4><p>分别克隆github和码云的项目到本地，修改一方的配置文件</p><h5 id="项目案例"><a href="#项目案例" class="headerlink" title="项目案例"></a>项目案例</h5><ol><li>Github：<a href="https://github.com/dqjdda/Aurora" target="_blank" rel="noopener">https://github.com/dqjdda/Aurora</a></li><li><p>码云：<a href="https://gitee.com/hgpt/Aurora" target="_blank" rel="noopener">https://gitee.com/hgpt/Aurora</a></p><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>修改.git文件夹内的config文件</p><p><img src="https://i.loli.net/2018/08/30/5b87d1145ddfe.jpg" alt="2018083015303858.jpg"></p><p>将另一方 config文件内的[remote “origin”]，复制到该文件内，并且修改origin名称，名称可以自定义。</p></li></ol><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><h5 id="上传代码"><a href="#上传代码" class="headerlink" title="上传代码"></a>上传代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"update"</span></span><br><span class="line">#提交到github</span><br><span class="line">git push github master</span><br><span class="line">#提交到码云</span><br><span class="line">git push gitee master</span><br></pre></td></tr></table></figure><h5 id="更新代码"><a href="#更新代码" class="headerlink" title="更新代码"></a>更新代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#从github拉取更新</span><br><span class="line">git pull github</span><br><span class="line">#从码云拉取更新</span><br><span class="line">git pull gitee</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;github毕竟是国外的，有时候访问也不稳定，而且速度也比较慢，所有我在提交代码到github上的时候有时候会同步一份到码云，之前都是分为两
      
    
    </summary>
    
      <category term="Git" scheme="www.zhengjie.me/categories/Git/"/>
    
    
      <category term="git提交代码到多个平台" scheme="www.zhengjie.me/tags/git%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E5%88%B0%E5%A4%9A%E4%B8%AA%E5%B9%B3%E5%8F%B0/"/>
    
      <category term="git入门" scheme="www.zhengjie.me/tags/git%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 2.0.4 &amp; Shiro1.4.0 后台脚手架</title>
    <link href="www.zhengjie.me/blog/666.html"/>
    <id>www.zhengjie.me/blog/666.html</id>
    <published>2018-08-28T09:30:44.000Z</published>
    <updated>2018-09-05T01:36:38.092Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Aurora-1-0"><a href="#Aurora-1-0" class="headerlink" title="Aurora 1.0"></a>Aurora 1.0</h3><p>Aurora是一个简单高效的后台管理系统。项目基础框架采用全新的Java Web开发框架 —— Spring Boot2.0.4，消除了繁杂的XML配置，使得二次开发更为简单；数据访问层采用Spring boot Jpa，可快速高效对数据进行操作，消除了大量传统XML配置SQL的代码，分页使用Pageable；安全框架采用时下流行的Apache Shiro，可实现对按钮级别的权限控制；前端页面使用KidAdmin构建，并提供多套配色以供选择。</p><a id="more"></a><h3 id="功能模块"><a href="#功能模块" class="headerlink" title="功能模块"></a>功能模块</h3><p>系统功能模块组成如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">|      _       _  _     ___      ____     ___        _</span><br><span class="line">|     /.\     FJ  L]   F _ &quot;,   F __ ]   F _ &quot;,     /.\</span><br><span class="line">|    //_\\   J |  | L J `-&apos;(|  J |--| L J `-&apos;(|    //_\\</span><br><span class="line">|   / ___ \  | |  | | |  _  L  | |  | | |  _  L   / ___ \</span><br><span class="line">|  / L___J \ F L__J J F |_\  L F L__J J F |_\  L / L___J \</span><br><span class="line">| J__L   J__J\______/J__| \\__J\______/J__| \\__J__L   J__L</span><br><span class="line">| |__L   J__|J______F|__|  J__|J______F|__|  J__|__L   J__|</span><br><span class="line">|</span><br><span class="line">| :: Spring Boot ::       (v2.0.4.RELEASE)</span><br><span class="line">|</span><br><span class="line">├─系统管理</span><br><span class="line">│  ├─用户管理</span><br><span class="line">│  ├─菜单管理（开发中）</span><br><span class="line">│  ├─角色管理</span><br><span class="line">│  └─权限管理</span><br><span class="line">├─系统监控</span><br><span class="line">│  ├─在线用户（开发中）</span><br><span class="line">│  └─系统日志</span><br><span class="line">│─网络资源（开发中）</span><br><span class="line">│  ├─ 开发中</span><br><span class="line">│  │  ├─散文</span><br><span class="line">│  │  ├─绘画</span><br><span class="line">│  │  └─语文</span><br><span class="line">│  ├─天气查询</span><br><span class="line">│  └─每日一文</span><br><span class="line">└─任务调度（开发中）</span><br><span class="line">   ├─定时任务</span><br><span class="line">   └─调度日志</span><br></pre></td></tr></table></figure></p><h3 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h3><h4 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h4><ul><li><p>基础框架：Spring Boot 2.0.4.RELEASE</p></li><li><p>持久层框架：Spring boot Jpa</p></li><li><p>安全框架：Apache Shiro 1.4.0</p></li><li><p>摸板引擎：Thymeleaf 3.0.9.RELEASE</p></li><li><p>数据库连接池：阿里巴巴Druid 1.1.10</p></li><li><p>缓存框架：Redis（暂时使用的是ehcache）</p></li><li><p>日志打印：logback</p></li><li><p>sql语句内容打印: log4jdbc+logback</p></li><li><p>工具包：hutool-all</p></li><li><p>其他：fastjson，aop，MapStruct等。</p></li></ul><h4 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h4><ul><li><p>基础框架：Layui（KidAdmin）</p></li><li><p>JavaScript框架：jQuery</p></li><li><p>树形插件：ztree</p></li><li><p>树形选择框：treeselect</p></li></ul><h4 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h4><ul><li><p>语言：Java 8</p></li><li><p>IDE：IntelliJ IDEA 2018.2.2（Ultimate）</p></li><li><p>依赖管理：Maven</p></li><li><p>数据库：MySQL 5.5.59</p></li><li><p>版本管理：git</p></li></ul><h3 id="系统预览"><a href="#系统预览" class="headerlink" title="系统预览"></a>系统预览</h3><ul><li><p>前端模板使用kitadmin，前端框架使用layui</p></li><li><p>登录页面</p></li></ul><p><img src="https://i.imgur.com/pfp2tiP.jpg" alt=""></p><ul><li>系统首页</li></ul><p><img src="https://i.imgur.com/WvrdWwV.jpg" alt=""></p><ul><li>用户管理</li></ul><p><img src="https://i.imgur.com/ouBHhXm.jpg" alt=""></p><ul><li>角色管理</li></ul><p><img src="https://i.imgur.com/mjUCarz.jpg" alt=""></p><ul><li>日志管理</li></ul><p><img src="https://i.imgur.com/fmnQknV.jpg" alt=""></p><ul><li>搜索统一使用侧边栏</li></ul><p><img src="https://i.imgur.com/2ZITZYU.jpg" alt=""></p><ul><li>sql日志打印使用log4jdbc+logback，效果如下</li></ul><p><img src="https://i.imgur.com/R1xsFXk.jpg" alt=""></p><h3 id="开发与部署"><a href="#开发与部署" class="headerlink" title="开发与部署"></a>开发与部署</h3><p>码云地址：<a href="https://gitee.com/hgpt/Aurora" target="_blank" rel="noopener">https://gitee.com/hgpt/Aurora</a> </p><p>GitHub 地址：<a href="https://github.com/dqjdda/Aurora" target="_blank" rel="noopener">https://github.com/dqjdda/Aurora</a> </p><p>下载后以Maven项目的方式导入Eclipse或者IDEA。</p><p>开发时直接使用Spring Boot的入口类<code>me.aurora.AuroraRun</code>启动即可，访问地址[localhost]，账号anyone，密码anyone123。</p><p>部署时，首先使用使用mvn package将项目打包成jar，然后使用命令<code>java -jar aurora-0.0.1-SNAPSHOT.jar</code>启动即可。</p><h4 id="docker-中部署"><a href="#docker-中部署" class="headerlink" title="docker 中部署"></a>docker 中部署</h4><ul><li>可参考链接<a href="https://www.zhengjie.me/blog/271.html">https://www.zhengjie.me/blog/271.html</a>。</li></ul><h3 id="反馈交流"><a href="#反馈交流" class="headerlink" title="反馈交流"></a>反馈交流</h3><ul><li>作者邮箱：<a href="mailto:zhengjie@tom.com" target="_blank" rel="noopener">zhengjie@tom.com</a></li><li>作者主页：<a href="https://www.zhengjie.me">https://www.zhengjie.me</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Aurora-1-0&quot;&gt;&lt;a href=&quot;#Aurora-1-0&quot; class=&quot;headerlink&quot; title=&quot;Aurora 1.0&quot;&gt;&lt;/a&gt;Aurora 1.0&lt;/h3&gt;&lt;p&gt;Aurora是一个简单高效的后台管理系统。项目基础框架采用全新的Java Web开发框架 —— Spring Boot2.0.4，消除了繁杂的XML配置，使得二次开发更为简单；数据访问层采用Spring boot Jpa，可快速高效对数据进行操作，消除了大量传统XML配置SQL的代码，分页使用Pageable；安全框架采用时下流行的Apache Shiro，可实现对按钮级别的权限控制；前端页面使用KidAdmin构建，并提供多套配色以供选择。&lt;/p&gt;
    
    </summary>
    
      <category term="后台管理系统" scheme="www.zhengjie.me/categories/%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="Spring boot" scheme="www.zhengjie.me/categories/%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/Spring-boot/"/>
    
    
      <category term="后台脚手架" scheme="www.zhengjie.me/tags/%E5%90%8E%E5%8F%B0%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
    
      <category term="后台管理系统" scheme="www.zhengjie.me/tags/%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="layui" scheme="www.zhengjie.me/tags/layui/"/>
    
  </entry>
  
  <entry>
    <title>Jhipster 微服务与微服务相互通信</title>
    <link href="www.zhengjie.me/blog/503.html"/>
    <id>www.zhengjie.me/blog/503.html</id>
    <published>2018-08-13T03:52:27.000Z</published>
    <updated>2018-08-29T09:35:20.938Z</updated>
    
    <content type="html"><![CDATA[<p>现有两个微服务A和B，A负责管理用户信息，B负责角色管理。 </p><ol><li>A服务发送请求，绑定角色，B服务收到请求后，调用A服务查询用户是否存在，判断用户是否重复绑定，条件通过则绑定用户，最后反馈信息给A服务 </li><li>A服务发送请求获取自己所有的权限，B服务收到请求后，调用A服务查询用户是否存在，存在则查询数据反馈信息给A服务 </li></ol><p>上面两个例子将用户和角色进行解耦，两者相互通信，那么微服务与微服务之间如何实现相互通信，这里将用一个简单的例子来说明。</p><h4 id="B服务控制器中添加Rest方法，为A服务提供调用"><a href="#B服务控制器中添加Rest方法，为A服务提供调用" class="headerlink" title="B服务控制器中添加Rest方法，为A服务提供调用"></a>B服务控制器中添加Rest方法，为A服务提供调用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"/roles/getRoles/&#123;userID&#125;"</span>)</span><br><span class="line"><span class="meta">@Timed</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">getRolesByUserID</span><span class="params">(@PathVariable(value = <span class="string">"userID"</span>)</span> Long userID)</span>&#123;</span><br><span class="line">        log.debug(<span class="string">"REST request to get Roles by UserID : &#123;&#125;"</span>, userID);</span><br><span class="line">        <span class="comment">//这里演示不做验证，直接New一个 Role返回Name</span></span><br><span class="line">        Role role = <span class="keyword">new</span> Role();</span><br><span class="line">        role.setName(<span class="string">"超级管理员"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity(role.getName(),HttpStatus.OK);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="A服务声明一个接口，接口中添加B服务的Rest方法"><a href="#A服务声明一个接口，接口中添加B服务的Rest方法" class="headerlink" title="A服务声明一个接口，接口中添加B服务的Rest方法"></a>A服务声明一个接口，接口中添加B服务的Rest方法</h4><p><code>@AuthorizedFeignClient(name = &quot;b&quot;)</code>，指定与哪个微服务通信</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.netbank.cloud.app.client.AuthorizedFeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="meta">@AuthorizedFeignClient</span>(name = <span class="string">"b"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/api/roles/getRoles/&#123;userID&#125;"</span>)</span><br><span class="line">    <span class="function">String <span class="title">getRolesByUserID</span><span class="params">(@PathVariable(value = <span class="string">"userID"</span>)</span> Long userID)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="A服务的控制器中注入UserClient"><a href="#A服务的控制器中注入UserClient" class="headerlink" title="A服务的控制器中注入UserClient"></a>A服务的控制器中注入<code>UserClient</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> UserClient userClient;</span><br></pre></td></tr></table></figure><h4 id="A服务控制器中编写Rest方法"><a href="#A服务控制器中编写Rest方法" class="headerlink" title="A服务控制器中编写Rest方法"></a>A服务控制器中编写Rest方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"/users/getRoles/&#123;userID&#125;"</span>)</span><br><span class="line"><span class="meta">@Timed</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">getRolesByUserID</span><span class="params">(@PathVariable(value =<span class="string">"userID"</span>)</span> Long userID)</span>&#123;</span><br><span class="line">        log.debug(<span class="string">"REST request to Get Roles : &#123;&#125;"</span>, userID);</span><br><span class="line">        <span class="comment">//调用接口中的方法</span></span><br><span class="line">        String roleName = userClient.getRolesByUserID(userID);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity(roleName,HttpStatus.OK);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="最后在swagger-ui中调试"><a href="#最后在swagger-ui中调试" class="headerlink" title="最后在swagger ui中调试"></a>最后在swagger ui中调试</h4><p><img src="https://i.imgur.com/avgnqO7.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;现有两个微服务A和B，A负责管理用户信息，B负责角色管理。 &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A服务发送请求，绑定角色，B服务收到请求后，调用A服务查询用户是否存在，判断用户是否重复绑定，条件通过则绑定用户，最后反馈信息给A服务 &lt;/li&gt;
&lt;li&gt;A服务发送请求获取自己所有的权
      
    
    </summary>
    
      <category term="JHipster" scheme="www.zhengjie.me/categories/JHipster/"/>
    
    
      <category term="Jhipster微服务调用微服务" scheme="www.zhengjie.me/tags/Jhipster%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="微服务相互通信" scheme="www.zhengjie.me/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9B%B8%E4%BA%92%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>Jhipster 如何彻底删除Entity</title>
    <link href="www.zhengjie.me/blog/498.html"/>
    <id>www.zhengjie.me/blog/498.html</id>
    <published>2018-08-10T08:56:00.000Z</published>
    <updated>2018-08-29T11:37:22.231Z</updated>
    
    <content type="html"><![CDATA[<p>Jhipster为我们提供了实体的相关命令，但是从图中可以看到并没有删除实体的操作 </p><p><img src="https://i.imgur.com/Unz0aO9.jpg" alt=""></p><p>而且我们再次输入：yo jhipster:entity User 时，提供的选项中也没有清除这一选项 </p><p><img src="https://i.imgur.com/7DkGONZ.jpg" alt=""></p><p>这也就意味着，我们将手动删除这个实体相关的所有文件<font color="#F33B45">（entity: domain, repository, rest, test, Angularjs controller &amp; services, HTML view, link in menu, HTML view）</font>，可能还将面临清理不彻底的问题。</p><p> 一旦我们清理不彻底，下次更新这个微服务时，我们删除的这个实体又会自动生成 那么如何才能彻底删除？我在国外的一个网站上终于找到了一种方式，那就是脚本删除，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env bash</span><br><span class="line">echo;</span><br><span class="line">if [ -z &quot;$1&quot; ];</span><br><span class="line">then</span><br><span class="line">    printf &quot;Required argument GROUP_ID你输入的 GROUP_ID 是 is not set. \nUsage: ./delete-entity.sh GROUP_ID ENTITY_NAME.\n&quot;;</span><br><span class="line">    exit 1;</span><br><span class="line">else</span><br><span class="line">    GROUP_ID=$1;</span><br><span class="line">    echo &quot;你输入的包路径是 &apos;$1&apos;.&quot;;</span><br><span class="line">fi</span><br><span class="line">if [ -z &quot;$2&quot; ];</span><br><span class="line">then</span><br><span class="line">    printf &quot;Required argument ENTITY_NAME is not set. \nUsage: ./delete-entity.sh GROUP_ID ENTITY_NAME .\n&quot;;</span><br><span class="line">    exit 1;</span><br><span class="line">else</span><br><span class="line">    ENTITY_NAME=$2;</span><br><span class="line">    JAVA_ENTITY_NAME=`echo $&#123;ENTITY_NAME:0:1&#125; | tr  &apos;[a-z]&apos; &apos;[A-Z]&apos;`$&#123;ENTITY_NAME:1&#125;</span><br><span class="line">    echo &quot;你输入的实体名称是 &apos;$2&apos;.&quot;</span><br><span class="line">    echo &quot;即将删除您的实体相关信息：&quot;;</span><br><span class="line">    echo &quot;domain, repository, rest, test, controller &amp; services, DTO, Mapper ...&quot;;</span><br><span class="line">fi</span><br><span class="line">JAVA_ENTITY_NAME=`echo $&#123;ENTITY_NAME:0:1&#125; | tr  &apos;[a-z]&apos; &apos;[A-Z]&apos;`$&#123;ENTITY_NAME:1&#125;</span><br><span class="line">UNDERSCORED_FOLDER_NAME=`echo $&#123;ENTITY_NAME&#125; | sed -r &apos;s/([a-z0-9])([A-Z])/\1-\L\2/g&apos;`</span><br><span class="line">QUESTION=$&apos;如果你想在将来重新生成实体，你可以选择保留实体自定义配置文件(.jhipster/&apos;$&#123;JAVA_ENTITY_NAME&#125;&apos;.json)\n你想删除实体定义文件吗？(yes or no)&apos;</span><br><span class="line">while true; do</span><br><span class="line">    read -p &quot;$&#123;QUESTION&#125;&quot; yn</span><br><span class="line">    case $yn in</span><br><span class="line">        [Yy]* ) rm -rf ./.jhipster/$&#123;ENTITY_NAME&#125;.json; break;;</span><br><span class="line">        [Nn]* ) break;;</span><br><span class="line">        * ) echo &quot;Please answer yes or no.&quot;;;</span><br><span class="line">    esac</span><br><span class="line">done</span><br><span class="line">echo;</span><br><span class="line">echo &quot;Starting to delete files...&quot;;</span><br><span class="line">echo;</span><br><span class="line">echo &quot;Starting to delete files...&quot;;</span><br><span class="line">rm -rf src/main/resources/config/liquibase/changelog/*_added_entity_$&#123;JAVA_ENTITY_NAME&#125;.xml</span><br><span class="line">rm -rf src/main/java/$&#123;GROUP_ID&#125;domain/$&#123;JAVA_ENTITY_NAME&#125;.java</span><br><span class="line">rm -rf src/main/java/$&#123;GROUP_ID&#125;repository/$&#123;JAVA_ENTITY_NAME&#125;Repository.java</span><br><span class="line">rm -rf src/main/java/$&#123;GROUP_ID&#125;service/$&#123;JAVA_ENTITY_NAME&#125;Service.java</span><br><span class="line">rm -rf src/main/java/$&#123;GROUP_ID&#125;service/impl/$&#123;JAVA_ENTITY_NAME&#125;ServiceImpl.java</span><br><span class="line">rm -rf src/main/java/$&#123;GROUP_ID&#125;repository/search/$&#123;JAVA_ENTITY_NAME&#125;SearchRepository.java</span><br><span class="line">rm -rf src/main/java/$&#123;GROUP_ID&#125;web/rest/$&#123;JAVA_ENTITY_NAME&#125;Resource.java</span><br><span class="line">rm -rf src/main/java/$&#123;GROUP_ID&#125;web/rest/dto/$&#123;JAVA_ENTITY_NAME&#125;DTO.java</span><br><span class="line">rm -rf src/main/java/$&#123;GROUP_ID&#125;web/rest/mapper/$&#123;JAVA_ENTITY_NAME&#125;Mapper.java</span><br><span class="line">rm -rf target/generated-sources/$&#123;GROUP_ID&#125;web/rest/mapper/$&#123;JAVA_ENTITY_NAME&#125;MapperImpl.java</span><br><span class="line">rm -rf src/main/webapp/app/entities/$&#123;UNDERSCORED_FOLDER_NAME&#125;/*</span><br><span class="line">rm -rf src/test/java/$&#123;GROUP_ID&#125;web/rest/$&#123;JAVA_ENTITY_NAME&#125;ResourceIntTest.java</span><br><span class="line">rm -rf src/test/gatling/simulations/$&#123;JAVA_ENTITY_NAME&#125;GatlingTest.scala</span><br><span class="line">rm -rf src/test/javascript/spec/app/entities/$&#123;UNDERSCORED_FOLDER_NAME&#125;/*</span><br><span class="line">rm -rf src/test/javascript/spec/app/entities/$&#123;UNDERSCORED_FOLDER_NAME&#125;</span><br><span class="line">rm -rf src/main/webapp/i18n/en/$&#123;ENTITY_NAME&#125;.json</span><br><span class="line">rm -rf src/main/webapp/i18n/fr/$&#123;ENTITY_NAME&#125;.json</span><br><span class="line">rm -rf src/main/webapp/i18n/ru/$&#123;ENTITY_NAME&#125;.json</span><br><span class="line">rm -rf src/main/webapp/i18n/uz/$&#123;ENTITY_NAME&#125;.json</span><br><span class="line">echo &quot;Deleting entity &apos;$&#123;ENTITY_NAME&#125;&apos; is completed.&quot;;</span><br><span class="line">echo;</span><br><span class="line">echo &quot;-----------------------------------------------------&quot;;</span><br><span class="line">echo &quot;Do not forget to manually correct these files also:  &quot;;</span><br><span class="line">echo &quot;-----------------------------------------------------&quot;;</span><br><span class="line">echo &quot; --&gt; src/main/webapp/index.html&quot;</span><br><span class="line">echo &quot; --&gt; src/main/webapp/scripts/compopnents/navbar.html&quot;</span><br><span class="line">echo &quot; --&gt; src/main/webapp/i18n/**/global.json&quot;</span><br><span class="line">echo &quot; --&gt; src/main/resources/config/liquibase/master.xml (if you use liquibase)&quot;</span><br><span class="line">echo &quot; --&gt; src/main/resources/config/mongeez/master.xml   (if you use mongodb)&quot;</span><br></pre></td></tr></table></figure><p>复制该代码，保存delete-entity.sh，文件后缀为.sh，我们将这个文件置于这个项目的根目录中，只需要执行：<br><code>delete-entity.sh [package]/ [entityName]</code><br>如：<code>delete-entity.sh me/zhengjie/ User</code></p><p><strong>注意：</strong><br><code>package在这里不能使用.，不然会找不到文件，需要使用/,最后也需要加上/</code> 弹出如下窗口，输入yes，即可彻底删除</p><p><img src="https://i.imgur.com/nfBng4Z.jpg" alt=""></p><p><strong>注意</strong><br><br>有些东西是需要手动更新的，如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">src/main/webapp/index.html</span><br><span class="line">src/main/webapp/scripts/compopnents/navbar.html</span><br><span class="line">src/main/webapp/i18n/**/global.json</span><br><span class="line">src/main/resources/config/liquibase/master.xml (if you use liquibase)</span><br><span class="line">src/main/resources/config/mongeez/master.xml   (if you use mongodb)</span><br></pre></td></tr></table></figure></p><p>重启项目，发现报错 </p><p><img src="https://i.imgur.com/77xinqS.jpg" alt=""></p><p>进入目录，<code>src/main/resources/config/liquibase/master.xml</code> 删除文件中报错的行即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Jhipster为我们提供了实体的相关命令，但是从图中可以看到并没有删除实体的操作 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Unz0aO9.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;而且我们再次输入：yo jhipster:entity U
      
    
    </summary>
    
      <category term="JHipster" scheme="www.zhengjie.me/categories/JHipster/"/>
    
    
      <category term="jhipster删除实体" scheme="www.zhengjie.me/tags/jhipster%E5%88%A0%E9%99%A4%E5%AE%9E%E4%BD%93/"/>
    
  </entry>
  
  <entry>
    <title>Jhipster创建实体，Gateway数据菜单为空</title>
    <link href="www.zhengjie.me/blog/494.html"/>
    <id>www.zhengjie.me/blog/494.html</id>
    <published>2018-08-10T02:05:35.000Z</published>
    <updated>2018-08-29T11:42:42.364Z</updated>
    
    <content type="html"><![CDATA[<p>在微服务创建entity后还需要在Gateway中同步一次，只有这样Gateway中才会生成相应的页面，不然访问他的数据菜单会是一个空的。切换到app文件夹，根据提示创建一个实体，可参考链接:<br> </p><p><a href="https://www.zhengjie.me/blog/438.html">JHipster 创建实体，并且增加关联关系</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd app</span><br><span class="line">yo jhipster:entity Role --table-name role</span><br><span class="line">......</span><br><span class="line">Overwrite src\main\resources\config\liquibase\master.xml? (ynaxdH)  Y</span><br></pre></td></tr></table></figure><p>创建完成后，打开网关服务，查看数据菜单，发现并没有我们添加的实体 </p><p><img src="https://i.imgur.com/Fh3VPpj.jpg" alt=""></p><p>这是因为我们只是在app中添加了Role，并没有将Role同步到<em>gateway</em>中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cd gateway</span><br><span class="line">yo jhipster:entity Role</span><br><span class="line">#是否从一个已经存在的微服生成</span><br><span class="line">Do you want to generate this entity from an existing microservice? Y</span><br><span class="line">#输入我们微服务的根路径（相对路径和绝对路径都可以）</span><br><span class="line">Enter the path to the microservice root directory: ../app</span><br><span class="line">#是否更新实体</span><br><span class="line">Do you want to update the entity? Y</span><br><span class="line">Overwrite src\main\webapp\app\layouts\navbar\navbar.component.html? (ynaxdH) y</span><br></pre></td></tr></table></figure><p>再次打开<code>http://10.93.0.96:8080/#/</code>，就能够查就能够对我们的实体进行操作了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在微服务创建entity后还需要在Gateway中同步一次，只有这样Gateway中才会生成相应的页面，不然访问他的数据菜单会是一个空的。切换到app文件夹，根据提示创建一个实体，可参考链接:&lt;br&gt; &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zhengji
      
    
    </summary>
    
      <category term="JHipster" scheme="www.zhengjie.me/categories/JHipster/"/>
    
    
      <category term="jhipster Gateway数据菜单为空" scheme="www.zhengjie.me/tags/jhipster-Gateway%E6%95%B0%E6%8D%AE%E8%8F%9C%E5%8D%95%E4%B8%BA%E7%A9%BA/"/>
    
  </entry>
  
  <entry>
    <title>【Java8新特性】使用Optional取代null</title>
    <link href="www.zhengjie.me/blog/492.html"/>
    <id>www.zhengjie.me/blog/492.html</id>
    <published>2018-08-09T13:06:36.000Z</published>
    <updated>2018-08-31T00:43:04.865Z</updated>
    
    <content type="html"><![CDATA[<p>在Java中对一个空对象进行操作时，便会抛出最常见的异常NullPointerException。为了改善这个问题，Java 8中提供了一个java.util.Optional<t>类型。Optional类的Javadoc描述如下：这是一个可以为null的容器对象。如果值存在则isPresent()方法会返回true，调用get()方法会返回该对象。</t></p><h4 id="类声明"><a href="#类声明" class="headerlink" title="类声明"></a>类声明</h4><p>以下是一个 java.util.Optional 类的声明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Optional</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Object</span></span></span><br></pre></td></tr></table></figure><h4 id="类创建"><a href="#类创建" class="headerlink" title="类创建"></a>类创建</h4><p>创建一个Optional对象有好几种方式：</p><h5 id="创建一个空的Optional"><a href="#创建一个空的Optional" class="headerlink" title="创建一个空的Optional"></a>创建一个空的Optional</h5><p>我们可以使用静态工厂方法Optional.empty，创建一个空的Optional对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Department&gt; department = Optional.empty();</span><br></pre></td></tr></table></figure><h5 id="根据非空值创建Optional"><a href="#根据非空值创建Optional" class="headerlink" title="根据非空值创建Optional"></a>根据非空值创建Optional</h5><p>我们也可以使用静态工厂方法Optional.of来创建一个非空对象的Optional对象：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Employee&gt; optEmployee = Optional.of(employee);</span><br></pre></td></tr></table></figure></p><p>如果employee为空，这段代码会立即抛出一个NullPointerException</p><h5 id="创建可以为null的Optional"><a href="#创建可以为null的Optional" class="headerlink" title="创建可以为null的Optional"></a>创建可以为null的Optional</h5><p>使用静态工厂方法Optional.ofNullable，我们可以创建一个允许null值的Optional对象：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Employee&gt; optEmployee = Optional.ofNullable(employee);</span><br></pre></td></tr></table></figure></p><p>如果employee为空，对其调用get方法将抛出NoSuchElementException。</p><h4 id="Optional-实例"><a href="#Optional-实例" class="headerlink" title="Optional 实例"></a>Optional 实例</h4><p>我们可以通过以下实例来更好的了解 Optional 类的使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Java8Tester</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">      Java8Tester java8Tester = <span class="keyword">new</span> Java8Tester();</span><br><span class="line">      Integer value1 = <span class="keyword">null</span>;</span><br><span class="line">      Integer value2 = <span class="keyword">new</span> Integer(<span class="number">10</span>);</span><br><span class="line">      <span class="comment">// Optional.ofNullable - 允许传递为 null 参数</span></span><br><span class="line">      Optional&lt;Integer&gt; a = Optional.ofNullable(value1);</span><br><span class="line">      <span class="comment">// Optional.of - 如果传递的参数是 null，抛出异常 NullPointerException</span></span><br><span class="line">      Optional&lt;Integer&gt; b = Optional.of(value2);</span><br><span class="line">      System.out.println(java8Tester.sum(a,b));</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Integer <span class="title">sum</span><span class="params">(Optional&lt;Integer&gt; a, Optional&lt;Integer&gt; b)</span></span>&#123;</span><br><span class="line">      <span class="comment">// Optional.isPresent - 判断值是否存在</span></span><br><span class="line">      System.out.println(<span class="string">"第一个参数值存在: "</span> + a.isPresent());</span><br><span class="line">      System.out.println(<span class="string">"第二个参数值存在: "</span> + b.isPresent());</span><br><span class="line">      <span class="comment">// Optional.orElse - 如果值存在，返回它，否则返回默认值</span></span><br><span class="line">      Integer value1 = a.orElse(<span class="keyword">new</span> Integer(<span class="number">0</span>));</span><br><span class="line">      <span class="comment">//Optional.get - 获取值，值需要存在</span></span><br><span class="line">      Integer value2 = b.get();</span><br><span class="line">      <span class="keyword">return</span> value1 + value2;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行以上代码，输出结果为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ javac Java8Tester.java</span><br><span class="line">$ java Java8Tester</span><br><span class="line">第一个参数值存在: <span class="keyword">false</span></span><br><span class="line">第二个参数值存在: <span class="keyword">true</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在Java中对一个空对象进行操作时，便会抛出最常见的异常NullPointerException。为了改善这个问题，Java 8中提供了一个java.util.Optional&lt;t&gt;类型。Optional类的Javadoc描述如下：这是一个可以为null的容器对象。如果值存
      
    
    </summary>
    
      <category term="随笔" scheme="www.zhengjie.me/categories/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="Java8新特性" scheme="www.zhengjie.me/categories/%E9%9A%8F%E7%AC%94/Java8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
    
      <category term="Java8新特性" scheme="www.zhengjie.me/tags/Java8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
      <category term="Optional" scheme="www.zhengjie.me/tags/Optional/"/>
    
  </entry>
  
  <entry>
    <title>Jhipster 创建微服务</title>
    <link href="www.zhengjie.me/blog/478.html"/>
    <id>www.zhengjie.me/blog/478.html</id>
    <published>2018-08-08T07:58:15.000Z</published>
    <updated>2018-08-29T11:58:20.257Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>jHipster 集成了springcloud的注册中心（eureka server）和配置中心（config server），eureka server 能够将我们自己开发的微服务（Microservices）都纳入到它自身当中，config server 能够集中管理应用程序各个环境下的配置，默认使用git 仓库存储配置内容。 <br><br><br>Microservices没有前端页面，前端页面由网关产生（gateway），权限控制可以通过UAA进行管理，并且要在JHipster Registry中注册、发现和管理。<br><br><br> <code>JHipster Registry</code> 是微服架构必不可少的。它把所有的组件连接在一起，使他们能够互相通信。<br><br><br> <code>Microservices</code> 它只有后台代码。它更注重的是在API上。一个微服结构可以有许多微服应用，每个包含几个相关的实体和业务规则。<br><br><code>Gateway</code> 它为所有微服务提供了HTTP路由和负载均衡，服务质量，安全和API文档。<br><br> <code>UAA</code>是一个使用OAuth2认证协议、为JHipster微服务提供用户账户和授权的服务。</p><p><img src="https://i.imgur.com/Vbap5GR.png" alt=""></p><h4 id="微服务安装"><a href="#微服务安装" class="headerlink" title="微服务安装"></a>微服务安装</h4><h5 id="安装JHipster-Registry"><a href="#安装JHipster-Registry" class="headerlink" title="安装JHipster Registry"></a>安装JHipster Registry</h5><p>由于 JHipster Registry 是一个标准的jhipster，所以我们只需要克隆下来运行它即可。没有必要打开idea或者修改它： <br></p><h6 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/jhipster/jhipster-registry</span><br><span class="line">#cd到jhipster-registry文件夹，运行</span><br><span class="line">mvnw</span><br></pre></td></tr></table></figure><p>执行mvnw命令后，系统将自动编译运行。 </p><h6 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/jhipster/jhipster-registry.git</span><br><span class="line"># 编译启动</span><br><span class="line">mvn clean package</span><br><span class="line">java -jar target/jhipster-registry-*.war</span><br></pre></td></tr></table></figure><p>打开<a href="http://localhost:8761/，并且登录，默认账户admin，密码admin。" target="_blank" rel="noopener">http://localhost:8761/，并且登录，默认账户admin，密码admin。</a></p><p>Instances Registered是自动注册的服务，当我们创建服务后，将自动注册到这里</p><p><img src="https://i.imgur.com/eROMVxV.jpg" alt=""></p><h5 id="安装uaa"><a href="#安装uaa" class="headerlink" title="安装uaa"></a>安装uaa</h5><p>部署完jHipster registry ，我们需要创建一个用于控制访问权限的项目。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#创建文件夹存放项目</span><br><span class="line">mkdir uaa</span><br><span class="line">#切换到文件夹</span><br><span class="line">cd uaa</span><br><span class="line">#创建UAA服务</span><br><span class="line">yo jhipster</span><br><span class="line">#仅供参考</span><br><span class="line">? (1/14) Which *type* of application would you like to create? [BETA] JHipster UAA server (for microservice OAuth2 authentication)</span><br><span class="line">? (2/14) What is the base name of your application? uaa</span><br><span class="line">? (3/14) Would you like to install other generators from the JHipster Market Place? No</span><br><span class="line">? (3/14) As you are running in a microservice architecture, on which port would like your server to run? It should be unique to avoid port conflicts. 9999</span><br><span class="line">? (4/14) What is your default Java package name? cn.jhipter.uaa</span><br><span class="line">? (5/14) Which Service Discovery and Configuration solution would you like to use? JHipster Registry (using Eureka and Spring Cloud Config)</span><br><span class="line">? (6/14) Which *type* of database would you like to use? SQL (H2, MySQL, MariaDB, PostgreSQL, Oracle, MSSQL)</span><br><span class="line">? (7/14) Which *production* database would you like to use? MySQL</span><br><span class="line">? (8/14) Which *development* database would you like to use? MySQL</span><br><span class="line">? (9/14) Do you want to use Hibernate 2nd level cache? Yes, with HazelCast (distributed cache, for multiple nodes)</span><br><span class="line">? (10/14) Would you like to use Maven or Gradle for building the backend? Maven</span><br><span class="line">? (11/14) Which other technologies would you like to use? (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to inverse selection)</span><br><span class="line">? (12/14) Would you like to enable internationalization support? Yes</span><br><span class="line">#国际化支持，选择简体中文</span><br><span class="line">? Please choose the native language of the application? Chinese (Simplified)</span><br><span class="line">? Please choose additional languages to install (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to inverse selection)</span><br><span class="line">? (13/14) Which testing frameworks would you like to use? (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to inverse selection)Gatling</span><br></pre></td></tr></table></figure><p>通过<code>mvnw</code>编译启动项目</p><h5 id="创建Microservices-Application"><a href="#创建Microservices-Application" class="headerlink" title="创建Microservices Application"></a>创建Microservices Application</h5><p>操作同uaa</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#创建文件夹存放项目</span><br><span class="line">mkdir app</span><br><span class="line">#切换到文件夹</span><br><span class="line">cd app</span><br><span class="line">#创建微服务</span><br><span class="line">yo jhipster</span><br><span class="line">#仅供参考</span><br><span class="line">? (1/14) Which *type* of application would you like to create? Microservice application</span><br><span class="line">? (2/14) What is the base name of your application? app</span><br><span class="line">? (3/14) Would you like to install other generators from the JHipster Market Place? No</span><br><span class="line">? (3/14) As you are running in a microservice architecture, on which port would like your server to run? It should be unique to avoid port conflicts. 8081</span><br><span class="line">? (4/14) What is your default Java package name? cn.jhipster.app</span><br><span class="line">? (5/14) Which *type* of authentication would you like to use? [BETA] Authentication with JHipster UAA server (the server must be generated separately)</span><br><span class="line">? (6/14) What is the folder path of your UAA application?. ../uaa</span><br><span class="line">? (7/14) Which Service Discovery and Configuration solution would you like to use? JHipster Registry (using Eureka and Spring Cloud Config)</span><br><span class="line">? (8/14) Which *type* of database would you like to use? SQL (H2, MySQL, MariaDB, PostgreSQL, Oracle)</span><br><span class="line">? (9/14) Which *production* database would you like to use? MySQL</span><br><span class="line">? (10/14) Which *development* database would you like to use? MySQL</span><br><span class="line">? (11/14) Do you want to use Hibernate 2nd level cache? Yes, with HazelCast (distributed cache, for multiple nodes)</span><br><span class="line">? (12/14) Would you like to use Maven or Gradle for building the backend? Maven</span><br><span class="line">? (13/14) Which other technologies would you like to use? (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to inverse selection)</span><br><span class="line">? (14/14) Would you like to enable internationalization support? Yes</span><br><span class="line">? Please choose the native language of the application? Chinese (Simplified)</span><br><span class="line">? Please choose additional languages to install (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to inverse selection)</span><br><span class="line">? (15/14) Which testing frameworks would you like to use? (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to inverse selection)Gatling</span><br></pre></td></tr></table></figure><p>同样还需要修改数据库配置<code>\src\main\resources\config\application-dev.yml</code>，在application.yml中可以看到，系统已经自动帮我们注册了 </p><p><img src="https://i.imgur.com/tuXzdBk.jpg" alt=""></p><p> 启动项目（参考uaa）</p><h5 id="创建网关-Gateway"><a href="#创建网关-Gateway" class="headerlink" title="创建网关(Gateway)"></a>创建网关(Gateway)</h5><p>创建一个网关，用来做为所有请求的入口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#创建文件夹存放项目</span><br><span class="line">mkdir gateway</span><br><span class="line">#切换到文件夹</span><br><span class="line">cd gateway</span><br><span class="line">#创建微服务网关</span><br><span class="line">yo jhipster</span><br><span class="line">#仅供参考</span><br><span class="line">? (1/14) Which *type* of application would you like to create? Microservice gateway</span><br><span class="line">? (2/14) What is the base name of your application? gateway</span><br><span class="line">? (3/14) Would you like to install other generators from the JHipster Market Place? No</span><br><span class="line">? (3/14) As you are running in a microservice architecture, on which port would like your server to run? It should be unique to avoid port conflicts. 8080</span><br><span class="line">? (4/14) What is your default Java package name? cn.jhipster.gateway</span><br><span class="line">? (5/14) Which *type* of authentication would you like to use? [BETA] Authentication with JHipster UAA server (the server must be generated separately)</span><br><span class="line">? (6/14) What is the folder path of your UAA application?. ../uaa</span><br><span class="line">? (7/14) Which Service Discovery and Configuration solution would you like to use? JHipster Registry (using Eureka and Spring Cloud Config)</span><br><span class="line">? (8/14) Which *type* of database would you like to use? SQL (H2, MySQL, MariaDB, PostgreSQL, Oracle, MSSQL)</span><br><span class="line">? (9/14) Which *production* database would you like to use? MySQL</span><br><span class="line">? (10/14) Which *development* database would you like to use? MySQL</span><br><span class="line">? (11/14) Do you want to use Hibernate 2nd level cache? Yes, with HazelCast (distributed cache, for multiple nodes)</span><br><span class="line">? (12/14) Would you like to use Maven or Gradle for building the backend? Maven</span><br><span class="line">? (13/14) Which other technologies would you like to use? (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to inverse selection)</span><br><span class="line">? (14/14) Would you like to use the LibSass stylesheet preprocessor for your CSS? No</span><br><span class="line">? (15/14) Would you like to enable internationalization support? Yes</span><br><span class="line">? Please choose the native language of the application? Chinese (Simplified)</span><br><span class="line">? Please choose additional languages to install (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to inverse selection)</span><br><span class="line">? (16/14) Which testing frameworks would you like to use? (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to inverse selection)Gatling</span><br></pre></td></tr></table></figure><p>同样需要修改数据库配置并启动项目 </p><p><img src="https://i.imgur.com/fqB3sGs.jpg" alt=""></p><p>打开<a href="http://localhost:8761，就可以查看到我们创建的服务。" target="_blank" rel="noopener">http://localhost:8761，就可以查看到我们创建的服务。</a> 将它和网关服务进行对比，可以看出网关页面管理里面多了些菜单。</p><p> <strong>软件推荐</strong>：</p><p> 由于创建都是敲命令实现的，而系统原生的cmd使用起来并不怎么友好，可以使用cmder这款软件进行操作。<code>cmder</code>是一个跨平台的命令行增强工具,可以集成windows batch, power shell, git, linux bash等多种命令行于一体,使用起来还是十分方便的 </p><p><strong>相关介绍：</strong> <a href="https://www.zhengjie.me/blog/465.html">https://www.zhengjie.me/blog/465.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h4&gt;&lt;p&gt;jHipster 集成了springcloud的注册中心（eureka server）和配置中心（config server），eureka
      
    
    </summary>
    
      <category term="JHipster" scheme="www.zhengjie.me/categories/JHipster/"/>
    
    
      <category term="JHipster入门" scheme="www.zhengjie.me/tags/JHipster%E5%85%A5%E9%97%A8/"/>
    
      <category term="jhipster微服务" scheme="www.zhengjie.me/tags/jhipster%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>解决JHipster启动出现空白页的问题</title>
    <link href="www.zhengjie.me/blog/443.html"/>
    <id>www.zhengjie.me/blog/443.html</id>
    <published>2018-08-07T04:23:15.000Z</published>
    <updated>2018-08-29T12:01:54.569Z</updated>
    
    <content type="html"><![CDATA[<h5 id="场景重现"><a href="#场景重现" class="headerlink" title="场景重现"></a>场景重现</h5><p>从git上拉取了一个JHipster项目，启动后，访问localhost:8080，出现的是空白的页面。</p><h5 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h5><p>能启动，但是访问页面都是空白的，访问swagger-ui得不到样式，排除代码问题，初步确认为是前端部分没有构建。</p><p><img src="https://i.imgur.com/Le7KviE.jpg" alt=""></p><h5 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h5><p>1、切换到项目根目录</p><p>2、依次执行命令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn</span><br><span class="line">yarn add node-sass</span><br><span class="line">yarn start</span><br></pre></td></tr></table></figure><p>yarn add node-sass 是安装依赖的node-sass包，在安装yarn时，如果node-sass没有安装成功，前端构建就会报错。</p><p>yarn start 会自动启动这个项目并打开浏览器页面。</p><p><img src="https://i.imgur.com/5Wsod3h.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;场景重现&quot;&gt;&lt;a href=&quot;#场景重现&quot; class=&quot;headerlink&quot; title=&quot;场景重现&quot;&gt;&lt;/a&gt;场景重现&lt;/h5&gt;&lt;p&gt;从git上拉取了一个JHipster项目，启动后，访问localhost:8080，出现的是空白的页面。&lt;/p&gt;
&lt;h5 i
      
    
    </summary>
    
      <category term="JHipster" scheme="www.zhengjie.me/categories/JHipster/"/>
    
    
      <category term="Jhipster空白页问题" scheme="www.zhengjie.me/tags/Jhipster%E7%A9%BA%E7%99%BD%E9%A1%B5%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>美化cmd，Windows神器推荐Cmder</title>
    <link href="www.zhengjie.me/blog/465.html"/>
    <id>www.zhengjie.me/blog/465.html</id>
    <published>2018-08-06T08:24:28.000Z</published>
    <updated>2018-08-29T12:05:03.966Z</updated>
    
    <content type="html"><![CDATA[<p>最近在使用JHipster，用的最多的就是在cmd中敲命令，但是Windows自带的doc窗口使用起来真的很不方便，而且也没有敲linux命令的感觉。百度了下，看到了这个工具，真的是相见恨晚</p><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p><code>cmder</code>是一个跨平台的命令行增强工具,可以集成windows batch, power shell, git, linux bash等多种命令行于一体,十分方便。</p><h5 id="界面的差异"><a href="#界面的差异" class="headerlink" title="界面的差异"></a>界面的差异</h5><p>在原生的doc窗口画风是这样的，而且查看文件夹不能使用ls，这对于一部分人来说真的很难受</p><p><img src="https://i.imgur.com/V9ui48F.jpg" alt=""></p><p> 在cmder中可以使用ls查看当前目录的所有文件夹，在cd文件时，会将相同名称的文件显示出来，当然他的强大不止这些 </p><p><img src="https://i.imgur.com/KnaNHxR.jpg" alt=""></p><h5 id="cmder安装"><a href="#cmder安装" class="headerlink" title="cmder安装"></a>cmder安装</h5><p>打开官网<a href="http://cmder.net" target="_blank" rel="noopener">http://cmder.net</a> 会有两个版本可供选择，个人推荐安装Full版本 </p><h6 id="cmder快捷操作及部分说明"><a href="#cmder快捷操作及部分说明" class="headerlink" title="cmder快捷操作及部分说明"></a>cmder快捷操作及部分说明</h6><ol><li>Cmder常用快捷键<ol><li>可以利用<code>Tab</code>，自动路径补全(爽,赞！)；</li><li>可以利用Ctrl+T建立新页签；</li><li>利用Ctrl+W关闭页签;</li><li>还可以透过Ctrl+Tab切换页签;</li><li>Alt+F4：关闭所有页签</li><li>Alt+Shift+1：开启cmd.exe</li><li>Alt+Shift+2：开启powershell.exe</li><li>Alt+Shift+3：开启powershell.exe (系统管理员权限)</li><li>Ctrl+1：快速切换到第1个页签</li><li>Ctrl+n：快速切换到第n个页签( n值无上限)</li><li>Alt + enter： 切换到全屏状态；</li><li>Ctr+r 历史命令搜索;</li><li>End, Home, Ctrl : Traversing text with as usual on Windows</li></ol></li><li>可在视窗内搜寻画面上出现过的任意关键字。</li><li>新增页签按钮，可透过滑鼠新增页签。</li><li>切换页签按钮，可透过滑鼠切换页签。</li><li>锁定视窗，让视窗无法再输入。</li><li>切换视窗是否提供卷轴功能，启动时可查询之前显示过的内容。</li><li>按下滑鼠左键可开启系统选单，滑鼠右键可开启工具选项视窗。 Win+Alt+P ：开启工具选项视窗</li></ol><h5 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h5><ol><li>它可以使用简单的复制（Ctrl+C）粘贴（Ctrl+V）</li><li>它可以执行一些常见但指令超长又难以记忆的语法;比如 ls cls等等，在控制台输入alias可以查看</li></ol><h5 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h5><p><a href="https://www.cnblogs.com/wenber/p/3740948.html" target="_blank" rel="noopener">安装mini版本后出现乱码文字重叠解决方法</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在使用JHipster，用的最多的就是在cmd中敲命令，但是Windows自带的doc窗口使用起来真的很不方便，而且也没有敲linux命令的感觉。百度了下，看到了这个工具，真的是相见恨晚&lt;/p&gt;
&lt;h5 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;head
      
    
    </summary>
    
      <category term="随笔" scheme="www.zhengjie.me/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="cmd" scheme="www.zhengjie.me/tags/cmd/"/>
    
      <category term="cmder" scheme="www.zhengjie.me/tags/cmder/"/>
    
  </entry>
  
  <entry>
    <title>JHipster 创建实体，并且增加关联关系</title>
    <link href="www.zhengjie.me/blog/438.html"/>
    <id>www.zhengjie.me/blog/438.html</id>
    <published>2018-08-06T06:52:29.000Z</published>
    <updated>2018-08-29T12:14:00.272Z</updated>
    
    <content type="html"><![CDATA[<p>当我们创建完应用时，可能想要创建一些实体类。例如我们想要创建一个User和Role实体类。对于每个实体，我们需要</p><ul><li>一个数据库表</li><li>一个Liquibase变更set</li><li>一个JPA实体</li><li>一个Spring data jpa repository</li><li>一个带有基础增删改查的rest controller</li><li>一个angular路由、组件以及服务</li><li>一个HTML视图</li><li>集成测试</li><li>性能测试</li></ul><p>如果我们有多个实体，你可能还想创建他们之间的关系，比如这个例子，你需要：</p><ul><li>一个数据库外键</li><li>指定Javascript和HTML代码管理此关系</li></ul><p>实体sub-generator(子生成器)，将会为每个实体创建所有需要的文件并且提供增删改查后端，sub-generator通过<code>jhipster entity &lt;entityName&gt; --[options]</code>运行。 注意：在Windows中，需要使用如下代码运行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yo jhipster:entity User --table-name user</span><br></pre></td></tr></table></figure><p>它支持的选项有：</p><ul><li><code>--table-name &lt;table_name&gt;</code> 通过JHipster会生成一个表，他的名称基于你的实体名称，如果你想要修改为不同的名称使用此选项</li><li><code>--angular-suffix &lt;suffix&gt;</code> 如果你想所有的都带有自定义的后缀，可使用此选项</li><li><code>--regenerate</code> 将会不做任何询问生成已存在的实体</li><li><code>--skip-server</code> 不会服务端代码</li><li><code>--skip-client</code>不会生成客户端代码</li><li><code>--db</code> 跳过服务端代码生成时指定数据库</li></ul><h4 id="实体字段"><a href="#实体字段" class="headerlink" title="实体字段"></a>实体字段</h4><p>对于每个实体，你可以添加很多字段。你需要输入字段名称和类型，JHipster将会生成你所需的代码和配置。这些字段名称不能包含关键字</p><h4 id="字段类型"><a href="#字段类型" class="headerlink" title="字段类型"></a>字段类型</h4><p>JHipster支持很多字段类型，这些支持依赖于你的后台数据库，所有我们使用Java类型去描述他们：一个Java <code>String</code>在Oracle和Cassandra中不同，这是Jhipster生成健壮和正确的数据库代码的一种方式。</p><ul><li><code>String</code> 它的默认长度取决于后端，如果你使用JPA默认长度<code>255</code>，你可以通过检验规则来修改它</li><li><code>Integer</code></li><li><code>Long</code></li><li><code>Float</code></li><li><code>Double</code></li><li><code>BigDecimal</code></li><li><code>LocalDate</code> 用于在Java中正确的管理日期</li><li><code>Instant</code> 用于时间戳</li><li><code>ZoneDateTime</code> 给定时区的本地时间</li><li><code>Enumeration</code> 枚举对象，当选择此类型时，子生成器将会询问你对应的枚举值并创建enum类</li><li><code>Blob</code> 用于存储二进制数据，当被选中时，子生成器会询问你存储的数据类型，是图片对象还是CLOB</li></ul><h4 id="尝试创建"><a href="#尝试创建" class="headerlink" title="尝试创建"></a>尝试创建</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">创建一个Role的实体</span><br><span class="line">yo jhipster:entity Role --table-name rol</span><br><span class="line">要为实体添加字段吗？</span><br><span class="line">Do you want to add a field to your entity? (Y/n) y</span><br><span class="line">字段名称是什么？</span><br><span class="line"> What is the name of your field? name</span><br><span class="line">选择字段类型</span><br><span class="line">What is the type of your field? String</span><br><span class="line">为字段添加一些验证</span><br><span class="line">Do you want to add validation rules to your field? (y/N) y</span><br><span class="line">1、唯一约束</span><br><span class="line">2、最小长度</span><br><span class="line">3、最大长度</span><br><span class="line">4、正则表达</span><br><span class="line">是否继续添加字段</span><br><span class="line">Do you want to add a field to your entity? (Y/n) n</span><br><span class="line">是否关联实体</span><br><span class="line">Do you want to add a relationship to another entity? No</span><br><span class="line">生成DTO（DOT详解）</span><br><span class="line"> Do you want to use a Data Transfer Object (DTO)? [BETA] Yes, generate a DTO with MapStruct</span><br><span class="line">生成Service</span><br><span class="line">Do you want to use separate service class for your business logic?</span><br><span class="line">Yes, generate a separate service interface and implementation</span><br><span class="line">添加分页</span><br><span class="line">Do you want pagination on your entity? Yes, with a simple pager</span><br><span class="line">不分页</span><br><span class="line">简单分页，基于bootstrap pager</span><br><span class="line">完成分页系统，基于Bootstrap pagination component</span><br><span class="line">滚动分页，基于infinite scroll directive</span><br></pre></td></tr></table></figure><h4 id="添加关联关系"><a href="#添加关联关系" class="headerlink" title="添加关联关系"></a>添加关联关系</h4><p>在上面的代码中就可以直接添加关联关系，这里我们演示修改实体，并且添加关联关系。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">再次输入</span><br><span class="line">yo jhipster:entity Role --table-name role</span><br><span class="line">你想更新实体吗？这将替换此实体的现有文件，所有自定义代码都将被覆盖</span><br><span class="line">Do you want to update the entity? This will replace the existing files for this entity, all your custom code will be overwritten (Use arrow keys)</span><br><span class="line">Yes, re generate the entity（是的，重新生成实体）</span><br><span class="line">Yes, add more fields and relationships（为实体添加新的字段）</span><br><span class="line">Yes, remove fields and relationships（是的，删除字段和关系）</span><br><span class="line">添加新的字段？</span><br><span class="line">Do you want to add a field to your entity? (Y/n) n</span><br><span class="line">是否关联其他实体</span><br><span class="line">Do you want to add a relationship to another entity? (Y/n) y</span><br><span class="line">实体的名称是什么？</span><br><span class="line">What is the name of the other entity? User</span><br><span class="line">关联关系的名称是什么？</span><br><span class="line">What is the name of the relationship? user</span><br><span class="line">选择关系类型</span><br><span class="line">What is the type of the relationship? (Use arrow keys) many-to-one</span><br><span class="line">  many-to-one</span><br><span class="line">  many-to-many</span><br><span class="line">  one-to-one</span><br><span class="line">展示他们的关系时，使用User的哪个字段</span><br><span class="line">When you display this relationship with Angular, which field from &apos;User&apos; do you want to use? (id) username</span><br><span class="line">是否要为此关系添加任何验证规则？</span><br><span class="line">Do you want to add any validation rules to this relationship? (y/N) n</span><br><span class="line">是否关联其他实体</span><br><span class="line">Do you want to add a relationship to another entity? (Y/n) n</span><br></pre></td></tr></table></figure><p>通过上面的命令，我们新增了Role，并且关联了User，并且为我们提供了后端的增删改查。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;当我们创建完应用时，可能想要创建一些实体类。例如我们想要创建一个User和Role实体类。对于每个实体，我们需要&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个数据库表&lt;/li&gt;
&lt;li&gt;一个Liquibase变更set&lt;/li&gt;
&lt;li&gt;一个JPA实体&lt;/li&gt;
&lt;li&gt;一个Spring
      
    
    </summary>
    
      <category term="JHipster" scheme="www.zhengjie.me/categories/JHipster/"/>
    
    
      <category term="JHipster入门" scheme="www.zhengjie.me/tags/JHipster%E5%85%A5%E9%97%A8/"/>
    
      <category term="JHipster创建实体详细教程" scheme="www.zhengjie.me/tags/JHipster%E5%88%9B%E5%BB%BA%E5%AE%9E%E4%BD%93%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>在windows中安装JHipster并创建应用</title>
    <link href="www.zhengjie.me/blog/433.html"/>
    <id>www.zhengjie.me/blog/433.html</id>
    <published>2018-08-04T03:33:21.000Z</published>
    <updated>2018-08-29T12:22:19.003Z</updated>
    
    <content type="html"><![CDATA[<p><em>jhipster</em>框架是目前比较流行的一个架构，它为java服务器端开发提供了一整套的解决方案，它能够开发和部署spring boot和anjular web 以及基于spring的微服务应用。在使用<em>jhipster</em>之前，需要先安装nodejs、yeoman和Yeoman，这里提供了两种安装方式：</p><h4 id="传统安装方法"><a href="#传统安装方法" class="headerlink" title="传统安装方法"></a>传统安装方法</h4><h5 id="安装Nodejs"><a href="#安装Nodejs" class="headerlink" title="安装Nodejs"></a>安装Nodejs</h5><p><img src="https://i.imgur.com/sgSSKDo.jpg" alt=""></p><p> LTS是正式版，Current是测试版，一般开发常用的就是LTS正式版，下载完成后，一直next安装即可，不需要设置环境变量，打开控制台，输入node -v出现版本号，即代表安装成功。</p><p><strong>安装成功后建议设置npm镜像加速</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br><span class="line">npm config set disturl https://npm.taobao.org/dist --global</span><br><span class="line">配置后可通过下面方式来验证是否成功</span><br><span class="line">npm config get registry</span><br></pre></td></tr></table></figure><h5 id="安装Yarn"><a href="#安装Yarn" class="headerlink" title="安装Yarn"></a>安装Yarn</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g yarn react-native-cli</span><br></pre></td></tr></table></figure><p>输入后会自动！安装完yarn后同理也要设置镜像源：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn config set registry https://registry.npm.taobao.org --global</span><br><span class="line">yarn config set disturl https://npm.taobao.org/dist --global</span><br></pre></td></tr></table></figure><p>安装完yarn之后就可以用<code>yarn</code>代替<code>npm</code>了</p><h5 id="安装-Yeoman（需要全局安装）"><a href="#安装-Yeoman（需要全局安装）" class="headerlink" title="安装 Yeoman（需要全局安装）"></a>安装 Yeoman（需要全局安装）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g yo</span><br></pre></td></tr></table></figure><h5 id="安装JHipster"><a href="#安装JHipster" class="headerlink" title="安装JHipster"></a>安装JHipster</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn global add generator-jhipster</span><br></pre></td></tr></table></figure><h4 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h4><p>通过官网给我们的一种安装方式（包管理器安装)</p><p><img src="https://i.imgur.com/KvS9Nji.jpg" alt=""></p><h5 id="安装Chocolatey"><a href="#安装Chocolatey" class="headerlink" title="安装Chocolatey"></a>安装Chocolatey</h5><p><code>Chocolatey</code>是一个Windows上的包管理器，类似于linux上的<code>yum</code>和 <code>apt-get</code>。 安装步骤，<a href="https://chocolatey.org/install" target="_blank" rel="noopener">点击这里</a>，官网上提供两种方式，一种是在CMD中，一种是在PowerShell中。 这里我们使用CMD中的安装：</p><blockquote><p>@”%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe” -NoProfile -ExecutionPolicy Bypass -Command “iex ((New-Object System.Net.WebClient).DownloadString(‘<a href="https://chocolatey.org/install.ps1&#39;))&quot;" target="_blank" rel="noopener">https://chocolatey.org/install.ps1&#39;))&quot;</a> &amp;&amp; SET “PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin”</p></blockquote><p>打开<code>CMD</code>敲入命令，敲回车，就会自动安装，并且自动配置环境变量。</p><h5 id="安装JHipster-1"><a href="#安装JHipster-1" class="headerlink" title="安装JHipster"></a>安装JHipster</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco install jhipster</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/eIbck0H.jpg" alt=""></p><p>回车以后，他只会提示<em>Do you want to run the script?</em> 这种提示，我们怎么知道他要下载什么，终于他成功的下载了所有的组件，包括我们有的（Node, Yarn, Yeoman, JDK 和 Git），如果我们电脑上有JDK 和 Git，或者不喜欢这种安装方式的可以选择第一种方式。</p><h4 id="安装成功后测试"><a href="#安装成功后测试" class="headerlink" title="安装成功后测试"></a>安装成功后测试</h4><p>安装成功后，我们尝试生成一个应用，输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yo jhipster</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/YQLLHwo.jpg" alt=""></p><h4 id="创建应用时的问题"><a href="#创建应用时的问题" class="headerlink" title="创建应用时的问题"></a>创建应用时的问题</h4><p>你选择的问题答案不同可能会影响到接下来的问题显示</p><h5 id="Q1-Which-type-of-application-would-you-like-to-create"><a href="#Q1-Which-type-of-application-would-you-like-to-create" class="headerlink" title="Q1. Which type of application would you like to create?"></a>Q1. Which type of application would you like to create?</h5><ul><li>Monolithic application: 单体应用</li><li>Microservice application: 微服务架构的service</li><li>Microservice gateway: 微服务网关，为微服务请求进行路由和安全</li><li>JHipster UAA server: 基于OAuth2的安全认证微服务，后文详细解释</li></ul><h5 id="Q2-What-is-the-base-name-of-your-application"><a href="#Q2-What-is-the-base-name-of-your-application" class="headerlink" title="Q2. What is the base name of your application?"></a>Q2. What is the base name of your application?</h5><p>你期望的应用的名称</p><h5 id="Q3-What-is-your-default-Java-package-name"><a href="#Q3-What-is-your-default-Java-package-name" class="headerlink" title="Q3. What is your default Java package name?"></a>Q3. What is your default Java package name?</h5><p>应用使用的默认包名，使用Yeoman的时候此值会被存储，当下次使用的时候此值会成为默认值，可覆写此值</p><h5 id="Q4-Do-you-want-to-use-the-JHipster-Registry-to-configure-monitor-and-scale-your-application"><a href="#Q4-Do-you-want-to-use-the-JHipster-Registry-to-configure-monitor-and-scale-your-application" class="headerlink" title="Q4. Do you want to use the JHipster Registry to configure, monitor and scale your application?"></a>Q4. Do you want to use the JHipster Registry to configure, monitor and scale your application?</h5><p><a href="http://www.jhipster.tech/jhipster-registry/" target="_blank" rel="noopener">JHipster Registry</a>是一个开源的工具，用于管理你正在运行的应用（微服务注册中心和统一配置中心），只有在微服务架构时才会使用</p><h5 id="Q5-Which-type-of-authentication-would-you-like-to-use"><a href="#Q5-Which-type-of-authentication-would-you-like-to-use" class="headerlink" title="Q5. Which type of authentication would you like to use?"></a>Q5. Which type of authentication would you like to use?</h5><p>所有可能的答案：</p><ul><li>JWT authentication: 使用JSON Web Token</li><li>HTTP Session Authentication：经典的基于session认证的机制</li><li>OAuth 2.0 / OIDC Authentication: 使用OpenID连接服务，类似于Keycloak或者Okta</li><li>Authentication with JHipster UAA server: 此种方式必须提前生成JHipster UAA Server (Q1的选项)，它是基于OAuth2的验证服务</li></ul><h5 id="Q6-Which-type-of-database-would-you-like-to-use"><a href="#Q6-Which-type-of-database-would-you-like-to-use" class="headerlink" title="Q6. Which type of database would you like to use?"></a>Q6. Which type of database would you like to use?</h5><p>你可以选择的选项：</p><ul><li>No database，仅使用微服务架构时可用</li><li>An SQL database: 使用关系型数据库，将会采用Spring data jpa</li><li>MongoDB</li><li>Cassandra</li><li>Couchbase</li></ul><h5 id="Q7-Which-production-database-would-you-like-to-use"><a href="#Q7-Which-production-database-would-you-like-to-use" class="headerlink" title="Q7. Which production database would you like to use?"></a>Q7. Which production database would you like to use?</h5><p>选择你线上环境使用的数据库，此选项决定<code>src/main/resources/config/application-prod.yml</code>的配置</p><h5 id="Q8-Which-development-database-would-you-like-to-use"><a href="#Q8-Which-development-database-would-you-like-to-use" class="headerlink" title="Q8. Which development database would you like to use?"></a>Q8. Which development database would you like to use?</h5><p>此选项决定你<code>src/main/resources/config/application-dev.yml</code>profile的数据库配置项，你可以选择：</p><ul><li>H2,running in-memory,数据存储在内存中，服务停掉数据消失</li><li>H2,with its data stored on disk,数据存储在硬盘，当前只是BETA测试且不能在Windows机器上工作</li><li>可以和Q7的选项一致</li></ul><h5 id="Q9-Do-you-want-to-use-the-Spring-cache-abstraction"><a href="#Q9-Do-you-want-to-use-the-Spring-cache-abstraction" class="headerlink" title="Q9. Do you want to use the Spring cache abstraction?"></a>Q9. Do you want to use the Spring cache abstraction?</h5><p>由于Spring对于Cache的允许用户使用不同的cache实现，你可以使用chcache(本地缓存)，Hazelcast(分布式缓存)或者Infinispan（另一种分布式缓存）,此选项可以提升你的应用的性能</p><h5 id="Q10-Do-you-want-to-use-Hibernate-2nd-level-cache"><a href="#Q10-Do-you-want-to-use-Hibernate-2nd-level-cache" class="headerlink" title="Q10. Do you want to use Hibernate 2nd level cache?"></a>Q10. Do you want to use Hibernate 2nd level cache?</h5><p>此选项仅当你选择SQL数据库并且在Q9选择了一个缓存实现。Hibernate使用二级缓存可以更好的提升它的性能</p><h5 id="Q11-Would-you-like-to-use-Maven-or-Gradle"><a href="#Q11-Would-you-like-to-use-Maven-or-Gradle" class="headerlink" title="Q11. Would you like to use Maven or Gradle?"></a>Q11. Would you like to use Maven or Gradle?</h5><p>构建此项目时将要使用的工具，<code>Maven</code>或者<code>Gradle</code></p><h5 id="Q12-Which-other-technologies-would-you-like-to-use"><a href="#Q12-Which-other-technologies-would-you-like-to-use" class="headerlink" title="Q12. Which other technologies would you like to use?"></a>Q12. Which other technologies would you like to use?</h5><p>多选，你可以为你的应用添加多种技术，如：</p><ul><li>Social login，社交登录功能</li><li>API first development using swagger-codegen：通过成swagger-codegen而使你的应用采用API优先的开发模式</li><li>Search engine using ElasticSearch: 对于ES的支持(Spring Data Elasticsearch)</li><li>Clustered HTTP sessions using Hazelcast,默认情况下,JHipster只是用Http Session来存储Spring Security的身份验证和授权信息。如果你在集群中运行，使用HTTP Session将会导致一些数据一致的问题，如果你想在集群中复制session，请选择此项</li></ul><h5 id="Q13-WebSockets-using-Spring-Websocket"><a href="#Q13-WebSockets-using-Spring-Websocket" class="headerlink" title="Q13. WebSockets using Spring Websocket"></a>Q13. WebSockets using Spring Websocket</h5><p>启用Websockets支持，将使用Spring WebSocket,JHipster提供了简单的例子展示如和高效的使用</p><h5 id="Q14-Asynchronous-messages-using-Apache-Kafka"><a href="#Q14-Asynchronous-messages-using-Apache-Kafka" class="headerlink" title="Q14. Asynchronous messages using Apache Kafka"></a>Q14. Asynchronous messages using Apache Kafka</h5><p>是否使用Kafka来发布和订阅消息</p><h5 id="Q15-Which-Framework-would-you-like-to-use-for-the-client"><a href="#Q15-Which-Framework-would-you-like-to-use-for-the-client" class="headerlink" title="Q15. Which Framework would you like to use for the client?"></a>Q15. Which Framework would you like to use for the client?</h5><p>选择使用那种客户端技术：</p><ul><li>Angular version 4+</li><li>AngularJS version 1.x</li></ul><h5 id="Q16-Would-you-like-to-use-the-LibSass-stylesheet-preprocessor-for-your-CSS"><a href="#Q16-Would-you-like-to-use-the-LibSass-stylesheet-preprocessor-for-your-CSS" class="headerlink" title="Q16. Would you like to use the LibSass stylesheet preprocessor for your CSS?"></a>Q16. Would you like to use the LibSass stylesheet preprocessor for your CSS?</h5><p>Node-sass对于设计CSS是一个优秀的解决方案，便于高效使用，你需要运行一个Gulp服务，jhipster会自动配置</p><h5 id="Q17-Would-you-like-to-enable-internationalization-support"><a href="#Q17-Would-you-like-to-enable-internationalization-support" class="headerlink" title="Q17. Would you like to enable internationalization support?"></a>Q17. Would you like to enable internationalization support?</h5><p>JHipster对于国际支持非常友好，你可以在客户端和服务端使用。但一般对于国际化要求不多的场景，可以不选择。</p><h5 id="Q18-Which-testing-frameworks-would-you-like-to-use"><a href="#Q18-Which-testing-frameworks-would-you-like-to-use" class="headerlink" title="Q18. Which testing frameworks would you like to use?"></a>Q18. Which testing frameworks would you like to use?</h5><p>默认Jhipster提供了Java单元/集成测试（spring`s Junit）和JavaScript单元测试（Karma.js），你也可以选择：</p><ul><li>Performance tests using Gatling，性能测试 Gatling</li><li>Behaviour tests using Cucumber,行为测试 Cucumber</li><li>Angular integration tests with Protractor, angular集成测试Protractor</li></ul><h5 id="Q19-Would-you-like-to-install-other-generators-from-the-JHipster-Marketplace"><a href="#Q19-Would-you-like-to-install-other-generators-from-the-JHipster-Marketplace" class="headerlink" title="Q19. Would you like to install other generators from the JHipster Marketplace?"></a>Q19. Would you like to install other generators from the JHipster Marketplace?</h5><p>是否需要去JHipster商城安装第三方插件模块</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;jhipster&lt;/em&gt;框架是目前比较流行的一个架构，它为java服务器端开发提供了一整套的解决方案，它能够开发和部署spring boot和anjular web 以及基于spring的微服务应用。在使用&lt;em&gt;jhipster&lt;/em&gt;之前，需要先安装node
      
    
    </summary>
    
      <category term="JHipster" scheme="www.zhengjie.me/categories/JHipster/"/>
    
    
      <category term="JHipster安装" scheme="www.zhengjie.me/tags/JHipster%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>Docker? 为什么要使用Docker？</title>
    <link href="www.zhengjie.me/blog/430.html"/>
    <id>www.zhengjie.me/blog/430.html</id>
    <published>2018-07-08T03:17:11.000Z</published>
    <updated>2018-08-29T12:28:04.817Z</updated>
    
    <content type="html"><![CDATA[<p>Docker 是一个开源的容器引擎，可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者和系统管理员在笔记本上编译测试通过的容器可以批量地在生产环境中部署，包括 VMs（虚拟机）、bare metal、OpenStack 集群、云端、数据中心和其他的基础应用平台。容器是完全使用沙箱机制，相互之间不会有任何接口。</p><h3 id="为啥要用Docker？"><a href="#为啥要用Docker？" class="headerlink" title="为啥要用Docker？"></a>为啥要用Docker？</h3><p><strong>为啥要用Docker?这要从目前软件行业的痛点来讲起</strong></p><ul><li><p>软件更新发布及部署低效，过程繁琐且需要人工介入 </p></li><li><p>环境一致性难以保证 </p></li><li><p>不同环境之间迁移成本太高</p></li></ul><p><strong>有了Docker可以很大程度解决上面的问题。</strong></p><ul><li>首先，Docker的使用简单至极，从开发的角度来看就是三步走：构建，运输，运行。其中关键步骤就是构建环节，即打包镜像文件。但是从测试和运维的角度来看，那就只有两步：复制，运行。有了这个镜像，那么想复制到哪运行都可以，完全和平台无关了。同时Docker这种容器技术隔离出了独立的运行空间，不会和其他应用争用系统资源了以及还不需要考虑应用之间相互影响，想想就开心。</li><li>其次，因为在构建镜像的时候就处理完了服务程序对于系统的所有依赖，所以在你使用的时候，你可以忽略掉原本程序的依赖以及开发语言。对测试和运维而言，更多专注于自己的业务内容上。</li><li>最后，Docker于开发者而言提供了一种开发环境的管理办法，与测试人员而言保证了环境的同步，于运维人员提供了可移植的标准化部署流程。</li></ul><h3 id="Docker-能干啥"><a href="#Docker-能干啥" class="headerlink" title="Docker 能干啥"></a>Docker 能干啥</h3><ul><li>构建容易分发简单</li><li>隔离应用解除依赖</li><li>快速部署测完就销</li></ul><h3 id="Docker的应用场景在哪？？"><a href="#Docker的应用场景在哪？？" class="headerlink" title="Docker的应用场景在哪？？"></a>Docker的应用场景在哪？？</h3><h4 id="本地依赖-Local-Dependency"><a href="#本地依赖-Local-Dependency" class="headerlink" title="本地依赖(Local Dependency)"></a>本地依赖(Local Dependency)</h4><p>你需要在本地系统快速尝试 Magento，或者为一个项目使用 MySQL？还是希望尝试大部分开源项目？那就使用 Docker 吧，它将帮你节省大量时间。Docker 能提升开发者的开发效率，让我们快速搭建开发环境。 开发环境的机器通常内存比较小，此前使用虚拟的时候，经常需要为开发环境的机器加内存，而通过 Docker 可以轻易的让几十个服务在 Docker 中跑起来。</p><h4 id="搭建环境-Build-Environment"><a href="#搭建环境-Build-Environment" class="headerlink" title="搭建环境(Build Environment)"></a>搭建环境(Build Environment)</h4><p>如果你希望构建源码，但发现没有准备好合适的环境。 那么使用 Docker是一个值得考虑的方案。毕竟如果使用传统的方法一个一个地安装软件，一大堆软件安装下来确实十分费时间，使用容器技术省时省力，何乐而不为？它能让你将运行环境和配置放在代码中然后部署，同一个 Docker 的配置可以在不同的环境中使用，这样就降低了硬件要求和应用环境之间耦合度。这里有一个值得一看的例子： docker golang builder。</p><h4 id="微服务-Microservices"><a href="#微服务-Microservices" class="headerlink" title="微服务(Microservices)"></a>微服务(Microservices)</h4><p>你在使用微服务吗？微服务架构将一个整体式的应用拆分成松耦合的单个服务。 那不妨考虑一下 Docker，你可以将每个服务打包为一个docker镜像并使用docker-compose 来模拟生产环境(checkout docker networks)。最开始实践的时候可能会比较费时费力，但长远地来看，最终将产生巨大的生产力。</p><p><img src="https://i.imgur.com/RYDjyxG.jpg" alt=""></p><h4 id="自动测试-Automated-testing"><a href="#自动测试-Automated-testing" class="headerlink" title="自动测试(Automated testing)"></a>自动测试(Automated testing)</h4><p>试想这样一个问题，如何编写自动化的集成测试用例，这些测试用例无需花很长时间来开始运行，使用者也可轻松管理。这里不是指在 Docker 中运行测试用例，而是将测试用例与镜像紧密运行在一起。当你针对一个 docker 镜像编写测试用例时会有一个很大的优势。下面简单介绍一下我的测试流程：运行两个 docker 镜像(app + db)，在 MySQL 启动时加载数据，并在 app docker 上使用 API。可查看此脚本以获取快速的示例。</p><h4 id="部署过程-Deployment-process"><a href="#部署过程-Deployment-process" class="headerlink" title="部署过程(Deployment process)"></a>部署过程(Deployment process)</h4><p>你可以使用 docker 镜像进行自我部署。许多主流的主机提供商都支持托管 docker，如果你拥有一个具有 shell 访问权限的专用节点/vm，那么事情将变得更容易。只需要设置好docker，并在你想要的端口上运行你的镜像即可。</p><h4 id="持续部署-Continuous-Deployment"><a href="#持续部署-Continuous-Deployment" class="headerlink" title="持续部署(Continuous Deployment)"></a>持续部署(Continuous Deployment)</h4><p>都说 Docker 天生适合持续集成/持续部署，在部署中使用Docker，持续部署将变得非常简单，并会在进入新的镜像后重新开始。关于这个部分的自动化工作，现在已经有许多方案以供选择，Kubernetes就是一个耳熟能详的名字。Kubernetes是容器集群管理系统，是一个开源的平台，可以实现容器集群的自动化部署、自动扩缩容、维护等功能。</p><p><img src="https://i.imgur.com/qtP9T8F.jpg" alt=""></p><h4 id="多租户环境-Multi-tenancy"><a href="#多租户环境-Multi-tenancy" class="headerlink" title="多租户环境(Multi-tenancy)"></a>多租户环境(Multi-tenancy)</h4><p>Docker 有意思的一个使用场景是在多租户的应用中，它可以避免关键应用的重写。如果你将应用程序服务公开给多个租户（租户指一组用户，例如组织），使用单租户方案设计的应用程序如果用上了 sub-domain + docker 可以快速获得提供多租户的服务。 关于这个场景的一个例子是为物联网的应用开发一个快速、易用的多租户环境。这种多租户的基本代码非常复杂，很难处理，重新规划这样一个应用不但消耗时间，也浪费金钱。使用Docker，可以为每一个租户的应用层的多个实例创建隔离的环境，这不仅简单而且成本低廉，当然这一切得益于 Docker 环境的启动速度和其高效的 diff 命令。</p><h4 id="来自一台机器的多个-APP-Multiple-apps-from-one-machine"><a href="#来自一台机器的多个-APP-Multiple-apps-from-one-machine" class="headerlink" title="来自一台机器的多个 APP(Multiple apps from one machine)"></a>来自一台机器的多个 APP(Multiple apps from one machine)</h4><p>这与上面提到的微服务有些联系，但即使你没有使用微服务，只是提供服务，Docker仍可以很好地管理单个机器上的所有服务。你应该使用文件夹挂载来为每个基于数据的 docker 镜像保留数据。</p><h4 id="扩容-QPS-Scaling-QPS"><a href="#扩容-QPS-Scaling-QPS" class="headerlink" title="扩容 QPS(Scaling QPS)"></a>扩容 QPS(Scaling QPS)</h4><p>Docker 通过创建另一个容器来帮助你轻松地进行水平扩展。如果遇到巨大的高峰流量，Docker可以帮助你解决问题 —— 只需添加更多的机器并增加负载均衡器背后运行的容器数量。</p><blockquote><p><strong>原文：</strong><br><br><a href="http://www.techug.com/post/docker-for-10-things-adaca4cca7f8.html" target="_blank" rel="noopener">http://www.techug.com/post/docker-for-10-things-adaca4cca7f8.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Docker 是一个开源的容器引擎，可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者和系统管理员在笔记本上编译测试通过的容器可以批量地在生产环境中部署，包括 VMs（虚拟机）、bare metal、OpenStack 集群、云端、数据中心和其他的基础应
      
    
    </summary>
    
      <category term="docker" scheme="www.zhengjie.me/categories/docker/"/>
    
    
      <category term="docker使用范围" scheme="www.zhengjie.me/tags/docker%E4%BD%BF%E7%94%A8%E8%8C%83%E5%9B%B4/"/>
    
      <category term="docker入门" scheme="www.zhengjie.me/tags/docker%E5%85%A5%E9%97%A8/"/>
    
      <category term="为什么使用docker" scheme="www.zhengjie.me/tags/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8docker/"/>
    
  </entry>
  
  <entry>
    <title>Java开发-必学的Linux命令整合</title>
    <link href="www.zhengjie.me/blog/429.html"/>
    <id>www.zhengjie.me/blog/429.html</id>
    <published>2018-07-01T13:23:37.000Z</published>
    <updated>2018-08-29T02:10:04.356Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个Java开发人员，有些常用的Linux命令必须掌握。即使平时开发过程中不使用Linux（Unix）或者mac系统，也需要熟练掌握Linux命令。因为很多服务器上都是Linux系统。所以，要和服务器机器交互，就要通过shell命令。</p><h3 id="必会Linux命令清单"><a href="#必会Linux命令清单" class="headerlink" title="必会Linux命令清单"></a><strong>必会Linux命令清单</strong></h3><h4 id="查找文件"><a href="#查找文件" class="headerlink" title="查找文件"></a><strong>查找文件</strong></h4><p><code>find / -name filename.txt</code>根据名称查找/目录下的filename.txt文件。 <code>find . -name &quot;*.xml&quot;</code>递归查找所有的xml文件 <code>find . -name &quot;*&quot; |xargs grep &quot;hello&quot;</code>递归查找所有文件内容中包含hello world的xml文件 <code>grep -H &#39;spring&#39; *.xml</code>查找所以有的包含spring的xml文件 <code>find ./ -size 0 | xargs rm -f &amp;</code>删除文件大小为零的文件 <code>ls -l | grep &#39;.jar&#39;</code>查找当前目录中的所有jar文件 <code>grep &#39;test&#39; d*</code>显示所有以d开头的文件中包含test的行。 <code>grep &#39;test&#39; aa bb cc</code>显示在aa，bb，cc文件中匹配test的行。 <code>grep &#39;[a-z]\{5\}&#39; aa</code>显示所有包含每个字符串至少有5个连续小写字符的字符串的行。</p><h4 id="查看一个程序是否运行"><a href="#查看一个程序是否运行" class="headerlink" title="查看一个程序是否运行"></a><strong>查看一个程序是否运行</strong></h4><p><code>ps –ef|grep tomcat</code>查看所有有关tomcat的进程 <code>ps -ef|grep --color java</code>高亮要查询的关键字</p><h4 id="终止进程"><a href="#终止进程" class="headerlink" title="终止进程"></a>终止进程</h4><p><code>kill -9 19979</code>终止线程号位19979的进程</p><h4 id="查看文件，包含隐藏文件"><a href="#查看文件，包含隐藏文件" class="headerlink" title="查看文件，包含隐藏文件"></a>查看文件，包含隐藏文件</h4><h4 id="ls-al"><a href="#ls-al" class="headerlink" title="ls -al"></a><code>ls -al</code></h4><h4 id="当前工作目录"><a href="#当前工作目录" class="headerlink" title="当前工作目录"></a><strong>当前工作目录</strong></h4><h4 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a><code>pwd</code></h4><h4 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h4><p><code>cp source dest</code>复制文件 <code>cp -r sourceFolder targetFolder</code>递归复制整个文件夹 <code>scp sourecFile name@ip:addr</code>远程拷贝</p><h4 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a><strong>创建目录</strong></h4><p><code>mkdir newfolder</code></p><h4 id="删除目录"><a href="#删除目录" class="headerlink" title="删除目录"></a><strong>删除目录</strong></h4><p><code>rmdir deleteEmptyFolder</code>删除空目录<code>rm -rf deleteFile</code>递归删除目录中所有内容</p><h4 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a><strong>移动文件</strong></h4><p><code>mv /temp/movefile /targetFolder</code></p><h4 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h4><p><code>mv oldNameFile newNameFile</code></p><h4 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h4><p><code>su -username</code></p><h4 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h4><p><code>chmod 777 file.java</code>file.java的权限-rwxrwxrwx，r表示读、w表示写、x表示可执行</p><h4 id="压缩文件"><a href="#压缩文件" class="headerlink" title="压缩文件"></a>压缩文件</h4><p><code>tar -czf test.tar.gz /test1 /test2</code></p><h4 id="列出压缩文件列表"><a href="#列出压缩文件列表" class="headerlink" title="列出压缩文件列表"></a>列出压缩文件列表</h4><p><code>tar -tzf test.tar.gz</code></p><h4 id="解压文件"><a href="#解压文件" class="headerlink" title="解压文件"></a>解压文件</h4><p><code>tar -xvzf test.tar.gz</code></p><h4 id="查看文件前10行"><a href="#查看文件前10行" class="headerlink" title="查看文件前10行"></a>查看文件前10行</h4><p><code>head -n 10 example.txt</code></p><h4 id="查看文件后10行"><a href="#查看文件后10行" class="headerlink" title="查看文件后10行"></a>查看文件后10行</h4><p><code>tail -n 10 example.txt</code></p><h4 id="查看日志最近更新"><a href="#查看日志最近更新" class="headerlink" title="查看日志最近更新"></a>查看日志最近更新</h4><p><code>tail -f exmaple.log</code>这个命令会自动显示新增内容，屏幕只显示10行内容的（可设置）。</p><h4 id="使用超级管理员身份执行命令"><a href="#使用超级管理员身份执行命令" class="headerlink" title="使用超级管理员身份执行命令"></a>使用超级管理员身份执行命令</h4><p><code>sudo rm a.txt</code>使用管理员身份删除文件</p><h4 id="查看端口占用情况"><a href="#查看端口占用情况" class="headerlink" title="查看端口占用情况"></a>查看端口占用情况</h4><p><code>netstat -tln | grep 8080</code>查看端口8080的使用情况</p><h4 id="查看端口属于哪个进程"><a href="#查看端口属于哪个进程" class="headerlink" title="查看端口属于哪个进程"></a>查看端口属于哪个进程</h4><p><code>lsof -i :8080</code></p><h4 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h4><p><code>ps aux|grep java</code>查看java进程 <code>ps aux</code>查看所有进程</p><h4 id="以树状格式列出目录"><a href="#以树状格式列出目录" class="headerlink" title="以树状格式列出目录"></a>以树状格式列出目录</h4><p><code>tree a</code> PS：Mac下使用tree命令</p><h4 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h4><p><code>wget http://file.tgz</code> PS ：Mac下安装wget命令 <code>curl http://file.tgz</code></p><h4 id="网络检测"><a href="#网络检测" class="headerlink" title="网络检测"></a>网络检测</h4><p><code>ping www.just-ping.com</code></p><h4 id="远程登录"><a href="#远程登录" class="headerlink" title="远程登录"></a>远程登录</h4><p><code>ssh userName@ip</code></p><h4 id="打印信息"><a href="#打印信息" class="headerlink" title="打印信息"></a>打印信息</h4><p><code>echo $JAVA_HOME</code>打印java home环境变量的值</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作为一个Java开发人员，有些常用的Linux命令必须掌握。即使平时开发过程中不使用Linux（Unix）或者mac系统，也需要熟练掌握Linux命令。因为很多服务器上都是Linux系统。所以，要和服务器机器交互，就要通过shell命令。&lt;/p&gt;
&lt;h3 id=&quot;必会Lin
      
    
    </summary>
    
      <category term="随笔" scheme="www.zhengjie.me/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="java学习linux命令" scheme="www.zhengjie.me/tags/java%E5%AD%A6%E4%B9%A0linux%E5%91%BD%E4%BB%A4/"/>
    
      <category term="Linux命令" scheme="www.zhengjie.me/tags/Linux%E5%91%BD%E4%BB%A4/"/>
    
      <category term="linux学习" scheme="www.zhengjie.me/tags/linux%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>掌握这10条规范，轻松搞定Git！</title>
    <link href="www.zhengjie.me/blog/428.html"/>
    <id>www.zhengjie.me/blog/428.html</id>
    <published>2018-06-04T09:31:20.000Z</published>
    <updated>2018-08-29T12:41:16.762Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、创建与合并分支"><a href="#一、创建与合并分支" class="headerlink" title="一、创建与合并分支"></a>一、创建与合并分支</h4><h5 id="从master分支创建dev分支并切换到dev分支："><a href="#从master分支创建dev分支并切换到dev分支：" class="headerlink" title="从master分支创建dev分支并切换到dev分支："></a>从master分支创建dev分支并切换到dev分支：</h5><ol><li>git checkout master</li><li>git checkout -b dev</li></ol><p>其中，git checkout -b dev 等价于：</p><ol><li>git branch dev</li><li>git checkout dev</li></ol><h5 id="查看本地当前的分支"><a href="#查看本地当前的分支" class="headerlink" title="查看本地当前的分支"></a>查看本地当前的分支</h5><p>分支前面带“*”表示当前分支，剩下的分支表示本地有的分支：</p><ul><li>git branch</li></ul><h5 id="查看远程全部的分支"><a href="#查看远程全部的分支" class="headerlink" title="查看远程全部的分支"></a>查看远程全部的分支</h5><p>白色的表示本地有的，红色的表示本地没有，仅在远程存在：</p><ul><li>git  branch  -a</li></ul><h5 id="修改代码、提交代码（当前的操作是在dev分支上进行）"><a href="#修改代码、提交代码（当前的操作是在dev分支上进行）" class="headerlink" title="修改代码、提交代码（当前的操作是在dev分支上进行）"></a>修改代码、提交代码（当前的操作是在dev分支上进行）</h5><ol><li>git add a.html</li><li>git commit -m “提交文件a.html”</li></ol><h5 id="分支合并-将dev合并到master"><a href="#分支合并-将dev合并到master" class="headerlink" title="分支合并(将dev合并到master)"></a>分支合并(将dev合并到master)</h5><ol><li>git checkout master</li><li>git merge dev</li></ol><h5 id="合并完成后，删除dev分支-删除dev分支时，注意我们当前所在的分支不能是dev分支"><a href="#合并完成后，删除dev分支-删除dev分支时，注意我们当前所在的分支不能是dev分支" class="headerlink" title="合并完成后，删除dev分支.(删除dev分支时，注意我们当前所在的分支不能是dev分支)"></a>合并完成后，删除dev分支.(删除dev分支时，注意我们当前所在的分支不能是dev分支)</h5><ul><li>git branch -d dev</li></ul><h5 id="删除后，查看分支-此时看不到dev分支了"><a href="#删除后，查看分支-此时看不到dev分支了" class="headerlink" title="删除后，查看分支(此时看不到dev分支了)"></a>删除后，查看分支(此时看不到dev分支了)</h5><ul><li>git branch</li></ul><h5 id="总结-：工作中经常从master创建新的分支，具体操作如下："><a href="#总结-：工作中经常从master创建新的分支，具体操作如下：" class="headerlink" title="总结 ：工作中经常从master创建新的分支，具体操作如下："></a>总结 ：工作中经常从master创建新的分支，具体操作如下：</h5><ol><li>git checkout master</li><li>git checkout -b  issues1234</li><li>git push origin issues1234</li><li>git add .</li><li>git commit -m “***”</li><li>git push origin issues1234</li></ol><p>注意：将本地分支branch1推到远端的branch2操作步骤：</p><ul><li>git push origin branch1:branch2</li></ul><h5 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h5><ol><li>git branch -D   issues1234  //本地强制删除分支issues1234    </li><li>git push origin  :issues1234  //推到远程</li></ol><h4 id="二、-解决冲突"><a href="#二、-解决冲突" class="headerlink" title="二、 解决冲突"></a>二、 解决冲突</h4><h5 id="发生冲突的文件"><a href="#发生冲突的文件" class="headerlink" title="发生冲突的文件"></a>发生冲突的文件</h5><ol><li>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</li><li>Creating a new branch is quick &amp; simple.</li><li>=======</li><li>Creating a new branch is quick AND simple.</li><li><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>feature1</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></li></ol><p>其中，git使用<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>，<code>=======</code>，<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>标记文件中自己和别人产生冲突的部分。 在<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>，<code>=======</code>之间为自己的代码； <code>=======</code>，<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>之间为别人的代码。 如果保留自己的代码，将别人的代码删掉即可。 2、冲突解决后提交</p><ol><li>git status</li><li>git add ***</li><li>git commit -m “fix conflict”</li><li>git push origin 分支名</li></ol><h4 id="三、Bug分支"><a href="#三、Bug分支" class="headerlink" title="三、Bug分支"></a>三、Bug分支</h4><h5 id="储藏更改-将当前更改的代码储藏起来，等以后恢复使用"><a href="#储藏更改-将当前更改的代码储藏起来，等以后恢复使用" class="headerlink" title="储藏更改:将当前更改的代码储藏起来，等以后恢复使用"></a>储藏更改:将当前更改的代码储藏起来，等以后恢复使用</h5><ul><li>git stash</li></ul><h5 id="查看储藏的代码"><a href="#查看储藏的代码" class="headerlink" title="查看储藏的代码"></a>查看储藏的代码</h5><ul><li>git stash list</li></ul><p>注： git stash list //查看全部的stash列表。 3、恢复储藏的代码</p><ul><li>git stash pop //恢复的同时把stash内容删掉</li></ul><p>或者</p><ol><li>git stash apply</li><li>stash，但是stash内容并不删除</li><li>git stash drop</li><li>面操作的基础上，以此来删除stash</li></ol><h5 id="将stash空间清空"><a href="#将stash空间清空" class="headerlink" title="将stash空间清空"></a>将stash空间清空</h5><ul><li>git stash clear</li></ul><p>git stash pop 和 git stash apply 区别 原来git stash pop stash@{id}命令会在执行后将对应的stash id 从stash list里删除，而 git stash apply stash@{id} 命令则会继续保存stash id。</p><h4 id="四、版本回退"><a href="#四、版本回退" class="headerlink" title="四、版本回退"></a>四、版本回退</h4><h5 id="回退至上一个版本"><a href="#回退至上一个版本" class="headerlink" title="回退至上一个版本"></a>回退至上一个版本</h5><ul><li>git reset –hard HEAD</li></ul><h5 id="回退至指定版本"><a href="#回退至指定版本" class="headerlink" title="回退至指定版本"></a>回退至指定版本</h5><ul><li>git reset –hard  版本号</li></ul><h5 id="查看以往版本号-本地的commit"><a href="#查看以往版本号-本地的commit" class="headerlink" title="查看以往版本号(本地的commit)"></a>查看以往版本号(本地的commit)</h5><ul><li>git reflog</li></ul><h5 id="查看各版本号及信息"><a href="#查看各版本号及信息" class="headerlink" title="查看各版本号及信息"></a>查看各版本号及信息</h5><p>所有的commit：本地commit + 其他同事的commit</p><ul><li>git log</li></ul><h4 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h4><h5 id="撤销修改-1"><a href="#撤销修改-1" class="headerlink" title="撤销修改"></a>撤销修改</h5><ul><li>git  checkout – a.html</li></ul><p>分两种情况分析：</p><ol><li>还没有执行 git add 操作，执行上面的操作后，会恢复到和版本库中一模一样的版本状态。</li><li>执行了git add ，还没执行 git commit ,再执行上面的操作后，会恢复到git add 结束后的状态</li></ol><p>注：一旦执行了git commit -m “*”，就不能再使用上面的命令回退。</p><h4 id="六、对于已经push的版本，进行回退"><a href="#六、对于已经push的版本，进行回退" class="headerlink" title="六、对于已经push的版本，进行回退"></a>六、对于已经push的版本，进行回退</h4><h5 id="第一步："><a href="#第一步：" class="headerlink" title="第一步："></a>第一步：</h5><ul><li>git reset –hard 版本号 //本地回退到指定的版本</li></ul><h5 id="第二步："><a href="#第二步：" class="headerlink" title="第二步："></a>第二步：</h5><ul><li>git push  -f origin dev //将远程的也回退到指定版本</li></ul><h4 id="七、本地同步远程删除的分支"><a href="#七、本地同步远程删除的分支" class="headerlink" title="七、本地同步远程删除的分支"></a>七、本地同步远程删除的分支</h4><ul><li>git fetch origin -p  </li><li>用来清除已经没有远程信息的分支，这样git branch -a 就不会拉取远程已经删除的分支了</li></ul><h4 id="八、删除掉没有与远程分支对应的本地分支"><a href="#八、删除掉没有与远程分支对应的本地分支" class="headerlink" title="八、删除掉没有与远程分支对应的本地分支"></a>八、删除掉没有与远程分支对应的本地分支</h4><p>从gitlab上看不到的分支在本地可以通过git branch -a 查到，删掉没有与远程分支对应的本地分支：</p><ul><li>git fetch -p</li></ul><h4 id="九、查看远程库的一些信息，及与本地分支的信息"><a href="#九、查看远程库的一些信息，及与本地分支的信息" class="headerlink" title="九、查看远程库的一些信息，及与本地分支的信息"></a>九、查看远程库的一些信息，及与本地分支的信息</h4><ul><li>git remote show origin</li></ul><h4 id="十、git-stash临时保存本地操作"><a href="#十、git-stash临时保存本地操作" class="headerlink" title="十、git stash临时保存本地操作"></a>十、git stash临时保存本地操作</h4><p>1、使用<code>git stash</code>就可以将你当前未提交到本地（和服务器）的代码推入到Git的栈中，这时候你的工作区间和上一次提交的内容是完全一样的。</p><p>2、再切换到别的分支改紧急bug。</p><p>3、改完后，切到刚才的分支，使用<code>git stash apply</code>将以前一半的工作应用回来。 也许有的人会说，那我可不可以多次将未提交的代码压入到栈中？答案是可以的。当你多次使用<code>git stash</code>命令后，你的栈里将充满了未提交的代码，这时候你会对将哪个版本应用回来有些困惑，<code>git stash list</code>命令可以将当前的Git栈信息打印出来，你只需要将找到对应的版本号，例如使用<code>git stash apply stash@{1}</code>就可以将你指定版本号为stash@{1}的工作取出来，当你将所有的栈都应用回来的时候，可以使用<code>git stash clear</code>来将栈清空。 在这里顺便提下<code>git format-patch-n</code>, n是具体某个数字， 例如<code>git format-patch-1</code>这时便会根据log生成一个对应的补丁，如果<code>git format-patch-2</code>那么便会生成2个补丁，当然前提是你的log上有至少有两个记录。</p><blockquote><p>作者：Miss_Ye</p></blockquote><blockquote><p>来自：<a href="https://segmentfault.com/a/1190000014461898" target="_blank" rel="noopener">https://segmentfault.com/a/1190000014461898</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;一、创建与合并分支&quot;&gt;&lt;a href=&quot;#一、创建与合并分支&quot; class=&quot;headerlink&quot; title=&quot;一、创建与合并分支&quot;&gt;&lt;/a&gt;一、创建与合并分支&lt;/h4&gt;&lt;h5 id=&quot;从master分支创建dev分支并切换到dev分支：&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="Git" scheme="www.zhengjie.me/categories/Git/"/>
    
    
      <category term="git入门" scheme="www.zhengjie.me/tags/git%E5%85%A5%E9%97%A8/"/>
    
      <category term="Git" scheme="www.zhengjie.me/tags/Git/"/>
    
      <category term="git stash临时保存本地操作" scheme="www.zhengjie.me/tags/git-stash%E4%B8%B4%E6%97%B6%E4%BF%9D%E5%AD%98%E6%9C%AC%E5%9C%B0%E6%93%8D%E4%BD%9C/"/>
    
      <category term="git合并与删除分支" scheme="www.zhengjie.me/tags/git%E5%90%88%E5%B9%B6%E4%B8%8E%E5%88%A0%E9%99%A4%E5%88%86%E6%94%AF/"/>
    
      <category term="git恢复stash内容" scheme="www.zhengjie.me/tags/git%E6%81%A2%E5%A4%8Dstash%E5%86%85%E5%AE%B9/"/>
    
      <category term="git撤销修改" scheme="www.zhengjie.me/tags/git%E6%92%A4%E9%94%80%E4%BF%AE%E6%94%B9/"/>
    
      <category term="git版本回退" scheme="www.zhengjie.me/tags/git%E7%89%88%E6%9C%AC%E5%9B%9E%E9%80%80/"/>
    
      <category term="git解决冲突" scheme="www.zhengjie.me/tags/git%E8%A7%A3%E5%86%B3%E5%86%B2%E7%AA%81/"/>
    
  </entry>
  
  <entry>
    <title>Spring boot整合SwaggerUI构建API文档</title>
    <link href="www.zhengjie.me/blog/383.html"/>
    <id>www.zhengjie.me/blog/383.html</id>
    <published>2018-04-05T07:40:34.000Z</published>
    <updated>2018-08-29T12:46:56.884Z</updated>
    
    <content type="html"><![CDATA[<p>SwaggerUI可以说是一个非常好用的API文档工具，它可以称为前后端开发人员的纽带，具体实现三步即可。</p><h5 id="导入依赖包"><a href="#导入依赖包" class="headerlink" title="导入依赖包"></a>导入依赖包</h5><p>我这里使用gradle构建的项目，maven项目自行转换下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Swagger2依赖</span></span><br><span class="line">compile(<span class="string">'io.springfox:springfox-swagger2:2.8.0'</span>)</span><br><span class="line">compile(<span class="string">'io.springfox:springfox-swagger-ui:2.8.0'</span>)</span><br></pre></td></tr></table></figure><h5 id="编写配置类"><a href="#编写配置类" class="headerlink" title="编写配置类"></a>编写配置类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.EnableAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="comment">//项目中存在多个controller包，使用该注解</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages = &#123;<span class="string">"oa.server.controller"</span>,<span class="string">"oa.server.activiti.controller"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line"><span class="comment">//单个controller包可使用这个</span></span><br><span class="line"><span class="comment">//                .apis(RequestHandlerSelectors.basePackage("oa.server.controller"))</span></span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">"OA-API-接口文档"</span>)</span><br><span class="line">                .description(<span class="string">"简单优雅的restfun风格"</span>)</span><br><span class="line">                .termsOfServiceUrl(<span class="string">"http://192.168.2.70:8081/#/oa"</span>)</span><br><span class="line">                .version(<span class="string">"1.0"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">`</span><br></pre></td></tr></table></figure><p><strong>注：如果项目中存在多个controller包，使用该注解</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan</span>(basePackages = &#123;<span class="string">"oa.server.controller"</span>,<span class="string">"oa.server.activiti.controller"</span>&#125;)</span><br></pre></td></tr></table></figure><h5 id="启动项目查看"><a href="#启动项目查看" class="headerlink" title="启动项目查看"></a>启动项目查看</h5><p>swagger默认启动地址：<br><br>项目地址后面加<code>/swagger-ui.html</code> 如：<code>http://localhost:8081/swagger-ui.html#</code> </p><p><strong>查看效果</strong></p><p><img src="https://i.imgur.com/qodFxtb.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;SwaggerUI可以说是一个非常好用的API文档工具，它可以称为前后端开发人员的纽带，具体实现三步即可。&lt;/p&gt;
&lt;h5 id=&quot;导入依赖包&quot;&gt;&lt;a href=&quot;#导入依赖包&quot; class=&quot;headerlink&quot; title=&quot;导入依赖包&quot;&gt;&lt;/a&gt;导入依赖包&lt;/h5&gt;
      
    
    </summary>
    
      <category term="Spring boot" scheme="www.zhengjie.me/categories/Spring-boot/"/>
    
    
      <category term="spring boot构建 SwaggerUI" scheme="www.zhengjie.me/tags/spring-boot%E6%9E%84%E5%BB%BA-SwaggerUI/"/>
    
  </entry>
  
  <entry>
    <title>Spring boot配置文件</title>
    <link href="www.zhengjie.me/blog/331.html"/>
    <id>www.zhengjie.me/blog/331.html</id>
    <published>2018-03-16T07:37:21.000Z</published>
    <updated>2018-08-29T13:11:31.556Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>application.properties它存在于<code>src/main/resources</code>目录下或者类路径的<code>/config</code>下它是我们程序的全局配置文件，我们可以对它默认配置的配置值进行修改。现在，让我们一起来揭开它的面纱。</p><h4 id="设置端口与自定义属性"><a href="#设置端口与自定义属性" class="headerlink" title="设置端口与自定义属性"></a>设置端口与自定义属性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//设置访问端口</span><br><span class="line">server.port=8080</span><br><span class="line">//设置自定义属性</span><br><span class="line">com.zhengjieblog.name=&quot;hello&quot;</span><br><span class="line">com.zhengjieblog.value=&quot;world&quot;</span><br></pre></td></tr></table></figure><p>使用<code>@Value(value=”${config.name}”)</code>，将值绑定到相应属性上，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;com.zhengjieblog.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;com.zhengjieblog.value&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;  <span class="keyword">return</span> name+value;  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动程序，在浏览器中输入 localhost:8080 就可以看到hello world<br><br>如果属性太多岂会变得很繁琐，Spring boot官方支持绑定到一个Bean上，使用注解<code>@ConfigurationProperties(prefix = “com.zhengjieblog”)</code>来指明使用在哪个Bean上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"com.zhengjieblog"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>添加依赖</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        optional <span class="string">"org.springframework.boot:spring-boot-configuration-processor"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">#lombok工具中的@Data注解，支持自动生成Getter和Setter方法</span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile(<span class="string">'org.projectlombok:lombok:1.16.18'</span>)</span><br><span class="line">&#125;</span><br><span class="line">compileJava.dependsOn(processResources)</span><br></pre></td></tr></table></figure><p>在spring Boot入口类加上<code>@EnableConfigurationProperties</code>并指明要加载哪个Bean<br> @EnableConfigurationProperties({ConfigBean.class}) <br>最后在控制器中使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ConfigBean configBean;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configBean.getName()+configBean.getValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用自定义的配置文件"><a href="#使用自定义的配置文件" class="headerlink" title="使用自定义的配置文件"></a>使用自定义的配置文件</h4><p>在<code>src/main/resources</code>路径下新建一个<code>application-prod.properties</code>配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com.zhengjieblog1.name=<span class="string">"hello"</span></span><br><span class="line">com.zhengjieblog1.value=<span class="string">"test world"</span></span><br></pre></td></tr></table></figure><p>新建一个测试Bean，指定到我们的配置文件即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"com.zhengjieblog1"</span>)</span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:application-prod.properties"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigTestBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="命令行方式-指定运行Spring-boot外部配置文件"><a href="#命令行方式-指定运行Spring-boot外部配置文件" class="headerlink" title="命令行方式 指定运行Spring boot外部配置文件"></a>命令行方式 指定运行Spring boot外部配置文件</h5><p>通过命令行的方式运行<code>spring boot</code>程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">java -jar xx.jar     --使用默认的配置文件</span><br><span class="line">运行外部配置文件</span><br><span class="line">java -Dspring.config.location=E:\resources\xx.properties -jar xx.jar</span><br><span class="line">修改tomcat端口号</span><br><span class="line">java -jar xx.jar --server.port=8888</span><br></pre></td></tr></table></figure><h4 id="配置文件的优先级"><a href="#配置文件的优先级" class="headerlink" title="配置文件的优先级"></a>配置文件的优先级</h4><p><code>application.properties</code>和<code></code>application.yml`文件可以放在以下四个位置：</p><ul><li>外置，在相对于应用程序运行目录的/congfig子目录里。</li><li>外置，在应用程序运行的目录里</li><li>内置，在config包内</li><li>内置，在Classpath根目录</li></ul><p>如果你在相同优先级位置同时有<code>application.properties</code>和<code>application.yml</code>，那么<code>application.properties</code>里的属性里面的属性就会覆盖<code>application.yml</code></p><blockquote><p> 参考: <a href="http://blog.didispace.com/springbootproperties/" target="_blank" rel="noopener">http://blog.didispace.com/springbootproperties/</a> </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;application.properties它存在于&lt;code&gt;src/main/resources&lt;/code&gt;目录下或者类路径的&lt;cod
      
    
    </summary>
    
      <category term="Spring boot" scheme="www.zhengjie.me/categories/Spring-boot/"/>
    
    
      <category term="spring boot配置文件详解" scheme="www.zhengjie.me/tags/spring-boot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>解决Spring boot无数据库启动失败的问题</title>
    <link href="www.zhengjie.me/blog/327.html"/>
    <id>www.zhengjie.me/blog/327.html</id>
    <published>2018-03-16T05:32:13.000Z</published>
    <updated>2018-08-29T13:13:57.210Z</updated>
    
    <content type="html"><![CDATA[<p>####前言<br>遇到这种问题，基本上是因为引入了数据库相关的依赖，而配置文件中又没有配置数据库。解决的办法有两种，第一种注释掉数据库相关的依赖，第二种加入如下注解</p><p><img src="https://i.imgur.com/qkG3Cdd.png" alt=""></p><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>在启动类中@SpringBootApplication注解后跟上一句话即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>(exclude=&#123;DataSourceAutoConfiguration.class,HibernateJpaAutoConfiguration.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;####前言&lt;br&gt;遇到这种问题，基本上是因为引入了数据库相关的依赖，而配置文件中又没有配置数据库。解决的办法有两种，第一种注释掉数据库相关的依赖，第二种加入如下注解&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/qkG3Cdd.png&quot; alt
      
    
    </summary>
    
      <category term="Spring boot" scheme="www.zhengjie.me/categories/Spring-boot/"/>
    
    
      <category term="spring boot禁止自动注入数据库" scheme="www.zhengjie.me/tags/spring-boot%E7%A6%81%E6%AD%A2%E8%87%AA%E5%8A%A8%E6%B3%A8%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>编写Dockerfile发布Spring boot项目</title>
    <link href="www.zhengjie.me/blog/271.html"/>
    <id>www.zhengjie.me/blog/271.html</id>
    <published>2018-03-07T14:07:30.000Z</published>
    <updated>2018-08-29T13:20:23.593Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>在公司写了两个月的oa项目，要上线初步测试，需要提供一个spring boot的docker镜像和前端整合，于是 查阅资料编写了一个dockerfile 现将步骤记录于此，方便自己，也希望能帮助其他人 </p><ol><li>在服务器上创建一个文件夹，将jar包和资源文件上传到该文件夹下</li><li>在该文件夹下新建一个Docker文件</li></ol><p>由于开发环境和生产环境的所使用的数据库是不一样的，所以在这里我指定了一个外部配置文件</p><h4 id="编写Dockerfile"><a href="#编写Dockerfile" class="headerlink" title="编写Dockerfile"></a>编写Dockerfile</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#基于镜像</span><br><span class="line">FROM azul/zulu-openjdk:8</span><br><span class="line">#创建一个放资源目录的文件夹</span><br><span class="line">VOLUME /etc/resources</span><br><span class="line">#将打包好的jar包添加到容器根目录</span><br><span class="line">ADD netbank.jar app.jar</span><br><span class="line">#将资源文件添加的资源文件夹</span><br><span class="line">ADD application.properties /etc/resources/application.properties</span><br><span class="line">RUN bash -c &apos;touch /app.jar&apos;</span><br><span class="line">#端口设置</span><br><span class="line">EXPOSE 8080</span><br><span class="line">#启动命令   --指定了外部application.properties</span><br><span class="line">CMD [&quot;java&quot;,&quot;-Dspring.config.location=/etc/resources/application.properties&quot;,&quot;-jar&quot;,&quot;app.jar&quot;]</span><br></pre></td></tr></table></figure><p>使用xshell或其他工具，定位到该目录</p><h4 id="执行命令，生成镜像"><a href="#执行命令，生成镜像" class="headerlink" title="执行命令，生成镜像"></a>执行命令，生成镜像</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build ./ -t springboot:1.0</span><br><span class="line">dcoker images    -查看镜像</span><br></pre></td></tr></table></figure><p><strong>./ </strong>  表明从当前路径中寻找Dockerfile文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name 容器名 -p 8080:8080 -itd 镜像id</span><br></pre></td></tr></table></figure><p>进入容器配置配置资源文件</p><blockquote></blockquote><p>参考: <a href="https://www.zhengjie.me/blog/233.html">https://www.zhengjie.me/blog/233.html</a> </p><blockquote></blockquote><p>参考资料Dockerfile详解: <a href="https://www.cnblogs.com/sorex/p/6481407.html" target="_blank" rel="noopener">https://www.cnblogs.com/sorex/p/6481407.html</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;在公司写了两个月的oa项目，要上线初步测试，需要提供一个spring boot的docker镜像和前端整合，于是 查阅资料编写了一个dock
      
    
    </summary>
    
      <category term="docker" scheme="www.zhengjie.me/categories/docker/"/>
    
    
      <category term="docker" scheme="www.zhengjie.me/tags/docker/"/>
    
      <category term="编写Dockerfile发布spring boot" scheme="www.zhengjie.me/tags/%E7%BC%96%E5%86%99Dockerfile%E5%8F%91%E5%B8%83spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>在docker容器中使用mysql</title>
    <link href="www.zhengjie.me/blog/237.html"/>
    <id>www.zhengjie.me/blog/237.html</id>
    <published>2018-03-05T05:11:50.000Z</published>
    <updated>2018-08-29T13:34:02.196Z</updated>
    
    <content type="html"><![CDATA[<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql    拉取官方镜像</span><br><span class="line">docker run --name mysql -p 3307:3306 -e MYSQL_ROOT_PASSWORD=123456 -itd 镜像id</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456   设置密码</span><br><span class="line">i是交互式操作，t是一个终端，d指的是在后台运行</span><br></pre></td></tr></table></figure><h4 id="运行后查看进入该容器启动mysql服务"><a href="#运行后查看进入该容器启动mysql服务" class="headerlink" title="运行后查看进入该容器启动mysql服务"></a>运行后查看进入该容器启动mysql服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mysql bash</span><br><span class="line">service mysql start</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/MOLItDd.png" alt=""></p><h4 id="设置允许在远程任何计算机上登录"><a href="#设置允许在远程任何计算机上登录" class="headerlink" title="设置允许在远程任何计算机上登录"></a>设置允许在远程任何计算机上登录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;密码&apos; WITH GRANT OPTION;</span><br><span class="line">设置成功后原密码也会改变</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title=&quot;步骤&quot;&gt;&lt;/a&gt;步骤&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span 
      
    
    </summary>
    
      <category term="docker" scheme="www.zhengjie.me/categories/docker/"/>
    
      <category term="MySQL" scheme="www.zhengjie.me/categories/docker/MySQL/"/>
    
    
      <category term="docker" scheme="www.zhengjie.me/tags/docker/"/>
    
      <category term="docker容器使用mysql" scheme="www.zhengjie.me/tags/docker%E5%AE%B9%E5%99%A8%E4%BD%BF%E7%94%A8mysql/"/>
    
  </entry>
  
  <entry>
    <title>基于centos的docker安装与卸载</title>
    <link href="www.zhengjie.me/blog/232.html"/>
    <id>www.zhengjie.me/blog/232.html</id>
    <published>2018-02-28T05:59:58.000Z</published>
    <updated>2018-08-29T13:38:48.054Z</updated>
    
    <content type="html"><![CDATA[<h5 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h5><ol><li>系统内核需要大于3.10 uname -r </li><li>最好确保yum为最新 <code>yum update</code></li></ol><h5 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install docker-io   或者 yum install docker-engine     --安装docker</span><br><span class="line">systemctl start docker.service    --启动docker服务</span><br><span class="line">systemctl enable docker    --设置开机自启</span><br></pre></td></tr></table></figure><h5 id="卸载docker"><a href="#卸载docker" class="headerlink" title="卸载docker"></a>卸载docker</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">列出所有docker安装包：yum list installed | grep docker</span><br><span class="line">[root@admin ~]# yum list installed | grep docker</span><br><span class="line">docker.x86_64                     2:1.12.6-71.git3e8e77d.el7.centos.1  @extras</span><br><span class="line">docker-client.x86_64              2:1.12.6-71.git3e8e77d.el7.centos.1  @extras</span><br><span class="line">docker-common.x86_64              2:1.12.6-71.git3e8e77d.el7.centos.1  @extras</span><br><span class="line">删除所有安装包</span><br><span class="line">[root@admin ~]# yum -y remove docker-common.x86_64</span><br><span class="line">删除所有镜像容器等</span><br><span class="line">[root@admin ~]# rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure><h5 id="其他docker操作参考实例"><a href="#其他docker操作参考实例" class="headerlink" title="其他docker操作参考实例"></a>其他docker操作参考实例</h5><blockquote><p><a href="https://www.zhengjie.me/blog/233.html">在docker中使用tomcat发布web项目</a><br>Windows下安装docker： <a href="https://www.linuxidc.com/Linux/2016-07/133506.htm" target="_blank" rel="noopener">https://www.linuxidc.com/Linux/2016-07/133506.htm</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;前提条件&quot;&gt;&lt;a href=&quot;#前提条件&quot; class=&quot;headerlink&quot; title=&quot;前提条件&quot;&gt;&lt;/a&gt;前提条件&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;系统内核需要大于3.10 uname -r &lt;/li&gt;
&lt;li&gt;最好确保yum为最新 &lt;code&gt;yum upd
      
    
    </summary>
    
      <category term="docker" scheme="www.zhengjie.me/categories/docker/"/>
    
    
      <category term="docker安装，docker卸载" scheme="www.zhengjie.me/tags/docker%E5%AE%89%E8%A3%85%EF%BC%8Cdocker%E5%8D%B8%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>MYSQL:开启远程访问权限</title>
    <link href="www.zhengjie.me/blog/169.html"/>
    <id>www.zhengjie.me/blog/169.html</id>
    <published>2018-01-22T14:14:47.000Z</published>
    <updated>2018-09-01T12:22:21.013Z</updated>
    
    <content type="html"><![CDATA[<p>登录mysql</p><ol><li>mysql -u root -ppassword</li></ol><p>授权为在任何主机上都能远程登录mysql</p><ol start="2"><li>mysql -u root -p grant all privileges on <em>.</em> to ‘root‘@’%’ identified by ‘password’ with</li><li>grant option;</li></ol><p>重新刷新权限</p><ol start="4"><li>flush privileges;</li><li>exit;      #退出</li></ol><h4 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h4><p><a href="http://www.linuxidc.com/Linux/2013-06/86459.htm" target="_blank" rel="noopener">http://www.linuxidc.com/Linux/2013-06/86459.htm</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;登录mysql&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;mysql -u root -ppassword&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;授权为在任何主机上都能远程登录mysql&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;mysql -u root -p grant all privil
      
    
    </summary>
    
      <category term="MySQL" scheme="www.zhengjie.me/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="www.zhengjie.me/tags/mysql/"/>
    
      <category term="mysql配置远程访问" scheme="www.zhengjie.me/tags/mysql%E9%85%8D%E7%BD%AE%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE/"/>
    
  </entry>
  
  <entry>
    <title>git生成ssh keys步骤与使用</title>
    <link href="www.zhengjie.me/blog/64.html"/>
    <id>www.zhengjie.me/blog/64.html</id>
    <published>2018-01-10T08:51:02.000Z</published>
    <updated>2018-08-29T13:45:03.409Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>SSH key 可以让你在你的电脑和Code服务器之间建立安全的加密连接。 打开Git Bash</p><h4 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h4><h5 id="查看本地是否存在公钥"><a href="#查看本地是否存在公钥" class="headerlink" title="查看本地是否存在公钥"></a>查看本地是否存在公钥</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>如果你看到一串字符就可以跳过生成公钥的步骤，如果没有出现，则需要使用下面的命令生成公钥。</p><h5 id="生成公钥"><a href="#生成公钥" class="headerlink" title="生成公钥"></a>生成公钥</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>执行后会在本地创建一个.ssh的文件夹</p><p><img src="https://i.imgur.com/eNrbWen.gif" alt=""></p><h5 id="复制公钥"><a href="#复制公钥" class="headerlink" title="复制公钥"></a>复制公钥</h5><p>打开文件直接复制</p><p><img src="https://i.imgur.com/qt8F24k.gif" alt=""></p><p>或者使用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clip &lt; ~/.ssh/id_rsa.pub        #复制到剪贴板</span><br></pre></td></tr></table></figure><h4 id="添加公钥到相应的Code服务器上。"><a href="#添加公钥到相应的Code服务器上。" class="headerlink" title="添加公钥到相应的Code服务器上。"></a>添加公钥到相应的Code服务器上。</h4><blockquote><p> <a href="https://code.aliyun.com/" target="_blank" rel="noopener">阿里云代码托管平台</a> 选择profile–&gt; SSH key–ADD SSH KEY<br><a href="https://github.com/" target="_blank" rel="noopener">github</a> 选择右上角头像–\setings–&gt; SSH and GPG keys</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;SSH key 可以让你在你的电脑和Code服务器之间建立安全的加密连接。 打开Git Bash&lt;/p&gt;
&lt;h4 id=&quot;具体操作&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="Git" scheme="www.zhengjie.me/categories/Git/"/>
    
    
      <category term="Git，git生成ssh key，git入门" scheme="www.zhengjie.me/tags/Git%EF%BC%8Cgit%E7%94%9F%E6%88%90ssh-key%EF%BC%8Cgit%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>git常用命令</title>
    <link href="www.zhengjie.me/blog/21.html"/>
    <id>www.zhengjie.me/blog/21.html</id>
    <published>2018-01-07T15:41:44.000Z</published>
    <updated>2018-08-29T14:51:05.180Z</updated>
    
    <content type="html"><![CDATA[<p>master : 默认开发分支； origin : 默认远程版本库</p><h5 id="初始化操作"><a href="#初始化操作" class="headerlink" title="初始化操作"></a>初始化操作</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git config -global user.name &lt;name&gt;  #设置提交者名字</span><br><span class="line">$ git config -global user.email &lt;email&gt;  #设置提交者邮箱</span><br><span class="line">$ git config -global core.editor &lt;editor&gt;  #设置默认文本编辑</span><br><span class="line">器</span><br><span class="line">$ git config -global merge.tool &lt;tool&gt;  #设置解决合并冲突时差异分析工具</span><br><span class="line">$ git config -list  #检查已有的配置信息</span><br></pre></td></tr></table></figure><h5 id="创建新版本库"><a href="#创建新版本库" class="headerlink" title="创建新版本库"></a>创建新版本库</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git clone &lt;url&gt;  #克隆远程版本库</span><br><span class="line">$ git init  #初始化本地版本库</span><br></pre></td></tr></table></figure><h5 id="修改和提交"><a href="#修改和提交" class="headerlink" title="修改和提交"></a>修改和提交</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git add .  #添加所有改动过的文件</span><br><span class="line">$ git add &lt;file&gt;  #添加指定的文件</span><br><span class="line">$ git mv &lt;old&gt; &lt;new&gt; #文件重命名</span><br><span class="line">$ git rm &lt;file&gt;  #删除文件</span><br><span class="line">$ git rm -cached &lt;file&gt;  #停止跟踪文件但不删除</span><br><span class="line">$ git commit -m &lt;file&gt; #提交指定文件</span><br><span class="line">$ git commit -m “commit message”  #提交所有更新过的文件</span><br><span class="line">$ git commit -amend  #修改最后一次提交</span><br><span class="line">$ git commit -C HEAD -a -amend  #增补提交（不会产生新的提交历史纪录）</span><br></pre></td></tr></table></figure><h5 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git log  #查看提交历史</span><br><span class="line">$ git log -p &lt;file&gt;  #查看指定文件的提交历史</span><br><span class="line">$ git blame &lt;file&gt;  #以列表方式查看指定文件的提交历史</span><br><span class="line">$ gitk  #查看当前分支历史纪录</span><br><span class="line">$ gitk &lt;branch&gt; #查看某分支历史纪录</span><br><span class="line">$ gitk --all  #查看所有分支历史纪录</span><br><span class="line">$ git branch -v  #每个分支最后的提交</span><br><span class="line">$ git status  #查看当前状态</span><br><span class="line">$ git diff  #查看变更内容</span><br></pre></td></tr></table></figure><h5 id="撤消操作"><a href="#撤消操作" class="headerlink" title="撤消操作"></a>撤消操作</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reset -hard HEAD  #撤消工作目录中所有未提交文件的修改内容</span><br><span class="line">$ git checkout HEAD &lt;file1&gt; &lt;file2&gt;  #撤消指定的未提交文件的</span><br></pre></td></tr></table></figure><h5 id="修改内容"><a href="#修改内容" class="headerlink" title="修改内容"></a>修改内容</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout HEAD. #撤消所有文件</span><br><span class="line">$ git revert &lt;commit&gt;  #撤消指定的提交</span><br></pre></td></tr></table></figure><h5 id="分支与标签"><a href="#分支与标签" class="headerlink" title="分支与标签"></a>分支与标签</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git branch  #显示所有本地分支</span><br><span class="line">$ git checkout &lt;branch/tagname&gt;  #切换到指定分支或标签</span><br><span class="line">$ git branch &lt;new-branch&gt;  #创建新分支</span><br><span class="line">$ git branch -d &lt;branch&gt;  #删除本地分支</span><br><span class="line">$ git tag  #列出所有本地标签</span><br><span class="line">$ git tag &lt;tagname&gt;  #基于最新提交创建标签</span><br><span class="line">$ git tag -d &lt;tagname&gt;  #删除标签</span><br></pre></td></tr></table></figure><h5 id="合并与衍合"><a href="#合并与衍合" class="headerlink" title="合并与衍合"></a>合并与衍合</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git merge &lt;branch&gt;  #合并指定分支到当前分支</span><br><span class="line">$ git rebase &lt;branch&gt;  #衍合指定分支到当前分支</span><br></pre></td></tr></table></figure><h5 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v  #查看远程版本库信息</span><br><span class="line">$ git remote show &lt;remote&gt;  #查看指定远程版本库信息</span><br><span class="line">$ git remote add &lt;remote&gt; &lt;url&gt;  #添加远程版本库</span><br><span class="line">$ git fetch &lt;remote&gt;  #从远程库获取代码</span><br><span class="line">$ git pull &lt;remote&gt; &lt;branch&gt;  #下载代码及快速合并</span><br><span class="line">$ git push &lt;remote&gt; &lt;branch&gt;  #上传代码及快速合并</span><br><span class="line">$ git push &lt;remote&gt; : &lt;branch&gt;/&lt;tagname&gt;  #删除远程分支或标签</span><br><span class="line">$ git push -tags  #上传所有标签</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;master : 默认开发分支； origin : 默认远程版本库&lt;/p&gt;
&lt;h5 id=&quot;初始化操作&quot;&gt;&lt;a href=&quot;#初始化操作&quot; class=&quot;headerlink&quot; title=&quot;初始化操作&quot;&gt;&lt;/a&gt;初始化操作&lt;/h5&gt;&lt;figure class=&quot;highl
      
    
    </summary>
    
      <category term="Git" scheme="www.zhengjie.me/categories/Git/"/>
    
    
      <category term="git命令，git入门" scheme="www.zhengjie.me/tags/git%E5%91%BD%E4%BB%A4%EF%BC%8Cgit%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
</feed>
